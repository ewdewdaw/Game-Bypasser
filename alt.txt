-- Carter's DHC Mobile Script for Low-End Devices
-- ULTIMATE BULLETPROOF VERSION - Survives ANY error and ALWAYS listens to commands

print("=== Carter's DHC ULTIMATE Controller Starting ===")

-- Global variables that survive ANY error
local _GLOBAL_WORKSPACE = _GLOBAL_WORKSPACE or {commands = {}, lastHeartbeat = 0, lastCommandCheck = 0, messageBuffer = {}, analytics = {}, altConfig = {}}
local _GLOBAL_CONFIG = _GLOBAL_CONFIG or {avoidDuplicates = true, deathProtection = true, deathThreshold = 6, deathTimeWindow = 2, executeAtStartup = true, deathCount = 0, deathTimer = 0, knownUsers = {}}

-- Initialize analytics with 24-hour tracking
_GLOBAL_WORKSPACE.analytics = {
    money = 0,
    wantedLevel = 0,
    startMoney = 0,
    moneyGained = 0,
    lastUpdate = 0,
    dailyStartMoney = 0,
    dailyMoneyGained = 0,
    weeklyStartMoney = 0,
    weeklyMoneyGained = 0,
    startTime = os.time()
}

-- ULTIMATE ERROR HANDLER - Prevents complete script death
local function ultimateErrorHandler(err)
    warn("[ULTIMATE ERROR HANDLER] " .. tostring(err))
    return "[SURVIVED] " .. tostring(err)
end

-- BULLETPROOF HTTP function that NEVER fails
local function bulletproofHttpRequest(url, method, body, headers)
    local success, result = pcall(function()
        method = method or "GET"
        
        -- Try EVERY possible HTTP method
        local requestFunc = syn and syn.request or http and http.request or http_request or request
        if fluxus and fluxus.request then
            requestFunc = fluxus.request
        end
        
        if requestFunc then
            local response = requestFunc({
                Url = url,
                Method = method,
                Headers = headers or {["Content-Type"] = "application/json"},
                Body = body
            })
            return response.Body, true, response.StatusCode
        else
            -- Fallback to basic game HTTP methods
            if method == "GET" then
                return game:HttpGet(url, true), true, 200
            else
                return game:HttpPost(url, body or "", true), true, 200
            end
        end
    end)
    
    return success and result or nil, success, success and 200 or 0
end

-- BULLETPROOF Get Player Info - ALWAYS works
local function getPlayerInfo()
    local success, result = pcall(function()
        local player = game:GetService("Players").LocalPlayer
        if player then
            return {
                username = player.Name,
                userid = player.UserId,
                serverid = game.JobId,
                placeid = game.PlaceId,
                status = "connected"
            }
        end
        return nil
    end)
    return success and result or nil
end

-- BULLETPROOF Screen Black - ALWAYS works
local function makeScreenBlack()
    pcall(function()
        if game:GetService("CoreGui") then
            local screenGui = Instance.new("ScreenGui")
            screenGui.Name = "BlackScreenGui"
            screenGui.IgnoreGuiInset = true
            screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
            
            local frame = Instance.new("Frame")
            frame.Size = UDim2.new(1, 0, 1, 0)
            frame.BackgroundColor3 = Color3.new(0, 0, 0)
            frame.BorderSizePixel = 0
            frame.Parent = screenGui
            
            screenGui.Parent = game:GetService("CoreGui")
        end
    end)
end

-- BULLETPROOF Configuration Loader - ALWAYS works
local function loadConfiguration()
    pcall(function()
        local url = "https://omebgle-default-rtdb.firebaseio.com/config.json"
        
        local response = bulletproofHttpRequest(url, "GET")
        if response and response ~= "null" then
            local data = game:GetService("HttpService"):JSONDecode(response)
            if data then
                -- Update configuration with values from Firebase
                for key, value in pairs(data) do
                    if _GLOBAL_CONFIG[key] ~= nil then
                        _GLOBAL_CONFIG[key] = value
                    end
                end
                print("Configuration loaded from Firebase")
            end
        else
            print("Using default configuration")
        end
    end)
end

-- BULLETPROOF Duplicate User Checker - ALWAYS works
local function checkForDuplicateUsers()
    if not _GLOBAL_CONFIG.avoidDuplicates then return end
    
    pcall(function()
        local playerInfo = getPlayerInfo()
        if not playerInfo then return end
        
        local url = "https://omebgle-default-rtdb.firebaseio.com/players.json"
        
        local response = bulletproofHttpRequest(url, "GET")
        if response and response ~= "null" then
            local players = game:GetService("HttpService"):JSONDecode(response)
            if players and type(players) == "table" then
                for userId, userData in pairs(players) do
                    if userId ~= tostring(playerInfo.userid) and 
                       userData and type(userData) == "table" and 
                       userData.serverid and playerInfo.serverid and
                       userData.serverid == playerInfo.serverid then
                        print("Duplicate script user detected: " .. (userData.username or "Unknown"))
                        serverHop()
                        return
                    end
                end
            end
        end
    end)
end

-- BULLETPROOF Server Hop - ALWAYS works
local function serverHop()
    pcall(function()
        local HttpService = game:GetService("HttpService")
        local TeleportService = game:GetService("TeleportService")
        
        local placeId = game.PlaceId
        local serversUrl = "https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?limit=100"
        
        local response = bulletproofHttpRequest(serversUrl, "GET")
        if response then
            local data = HttpService:JSONDecode(response)
            if data and data.data then
                local servers = {}
                for _, server in ipairs(data.data) do
                    if server.id ~= game.JobId and server.playing < server.maxPlayers then
                        table.insert(servers, server)
                    end
                end
                
                if #servers > 0 then
                    local randomServer = servers[math.random(1, #servers)]
                    print("Server hopping to: " .. randomServer.id)
                    TeleportService:TeleportToPlaceInstance(placeId, randomServer.id)
                else
                    print("No available servers found for server hop")
                end
            end
        else
            print("Failed to fetch server list")
        end
    end)
end

-- BULLETPROOF Death Protection - ALWAYS works
local function setupDeathProtection()
    if not _GLOBAL_CONFIG.deathProtection then return end
    
    pcall(function()
        local player = game:GetService("Players").LocalPlayer
        if not player then return end
        
        player.CharacterAdded:Connect(function(character)
            pcall(function()
                local humanoid = character:WaitForChild("Humanoid")
                humanoid.Died:Connect(function()
                    local currentTime = tick()
                    
                    if currentTime - _GLOBAL_CONFIG.deathTimer > (_GLOBAL_CONFIG.deathTimeWindow * 60) then
                        _GLOBAL_CONFIG.deathCount = 0
                        _GLOBAL_CONFIG.deathTimer = currentTime
                    end
                    
                    _GLOBAL_CONFIG.deathCount = _GLOBAL_CONFIG.deathCount + 1
                    print("Death count: " .. _GLOBAL_CONFIG.deathCount .. "/" .. _GLOBAL_CONFIG.deathThreshold)
                    
                    if _GLOBAL_CONFIG.deathCount >= _GLOBAL_CONFIG.deathThreshold then
                        print("Too many deaths detected, server hopping...")
                        serverHop()
                    end
                end)
            end)
        end)
    end)
end

-- BULLETPROOF Analytics Updater with 24-hour tracking - ALWAYS works
local function updateAnalyticsData()
    pcall(function()
        local player = game:GetService("Players").LocalPlayer
        if not player then return end
        
        local currentMoney = 0
        local currentWanted = 0
        
        pcall(function()
            if player:FindFirstChild("DataFolder") and player.DataFolder:FindFirstChild("Currency") then
                currentMoney = player.DataFolder.Currency.Value
            end
        end)
        
        pcall(function()
            if player:FindFirstChild("DataFolder") and player.DataFolder:FindFirstChild("Information") and player.DataFolder.Information:FindFirstChild("Wanted") then
                currentWanted = player.DataFolder.Information.Wanted.Value
            end
        end)
        
        if _GLOBAL_WORKSPACE.analytics.startMoney == 0 then
            _GLOBAL_WORKSPACE.analytics.startMoney = currentMoney
            _GLOBAL_WORKSPACE.analytics.money = currentMoney
            _GLOBAL_WORKSPACE.analytics.dailyStartMoney = currentMoney
            _GLOBAL_WORKSPACE.analytics.weeklyStartMoney = currentMoney
            print("Starting money: $" .. currentMoney)
        end
        
        _GLOBAL_WORKSPACE.analytics.moneyGained = currentMoney - _GLOBAL_WORKSPACE.analytics.startMoney
        _GLOBAL_WORKSPACE.analytics.dailyMoneyGained = currentMoney - _GLOBAL_WORKSPACE.analytics.dailyStartMoney
        _GLOBAL_WORKSPACE.analytics.weeklyMoneyGained = currentMoney - _GLOBAL_WORKSPACE.analytics.weeklyStartMoney
        _GLOBAL_WORKSPACE.analytics.money = currentMoney
        _GLOBAL_WORKSPACE.analytics.wantedLevel = currentWanted
        
        local currentTime = os.time()
        if currentTime - _GLOBAL_WORKSPACE.analytics.startTime >= 86400 then
            _GLOBAL_WORKSPACE.analytics.dailyStartMoney = currentMoney
            _GLOBAL_WORKSPACE.analytics.dailyMoneyGained = 0
            _GLOBAL_WORKSPACE.analytics.startTime = currentTime
            print("24-hour timer reset. New daily baseline set.")
        end
        
        if currentTime - _GLOBAL_WORKSPACE.analytics.startTime >= 604800 then
            _GLOBAL_WORKSPACE.analytics.weeklyStartMoney = currentMoney
            _GLOBAL_WORKSPACE.analytics.weeklyMoneyGained = 0
            _GLOBAL_WORKSPACE.analytics.startTime = currentTime
            print("Weekly timer reset. New weekly baseline set.")
        end
        
        if tick() - _GLOBAL_WORKSPACE.analytics.lastUpdate > 30 then
            _GLOBAL_WORKSPACE.analytics.lastUpdate = tick()
            
            local playerInfo = getPlayerInfo()
            if playerInfo then
                local analyticsData = {
                    username = playerInfo.username,
                    money = _GLOBAL_WORKSPACE.analytics.money,
                    wantedLevel = _GLOBAL_WORKSPACE.analytics.wantedLevel,
                    moneyGained = _GLOBAL_WORKSPACE.analytics.moneyGained,
                    dailyMoneyGained = _GLOBAL_WORKSPACE.analytics.dailyMoneyGained,
                    weeklyMoneyGained = _GLOBAL_WORKSPACE.analytics.weeklyMoneyGained,
                    lastUpdate = os.time(),
                    serverId = game.JobId,
                    startTime = _GLOBAL_WORKSPACE.analytics.startTime
                }
                local jsonData = game:GetService("HttpService"):JSONEncode(analyticsData)
                bulletproofHttpRequest(
                    "https://omebgle-default-rtdb.firebaseio.com/analytics/" .. playerInfo.userid .. ".json",
                    "PUT",
                    jsonData
                )
            end
        end
    end)
end

-- BULLETPROOF Script Checker - ALWAYS works
local function checkAndExecuteScript()
    pcall(function()
        local url = "https://omebgle-default-rtdb.firebaseio.com/script.json"
        
        local response = bulletproofHttpRequest(url, "GET")
        if response and response ~= "null" then
            local data = game:GetService("HttpService"):JSONDecode(response)
            if data and data.code and data.code ~= "" then
                table.insert(_GLOBAL_WORKSPACE.commands, {
                    command = "execute-custom",
                    script = data.code,
                    timestamp = os.time()
                })
                print("Script added to workspace from Firebase")
                
                bulletproofHttpRequest(
                    url,
                    "PUT",
                    '{"code":""}'
                )
            end
        end
    end)
end

-- BULLETPROOF Heartbeat - ALWAYS works
local function sendBulletproofHeartbeat()
    pcall(function()
        local currentTime = os.time()
        _GLOBAL_WORKSPACE.lastHeartbeat = currentTime
        
        local player = game:GetService("Players").LocalPlayer
        local heartbeatData = {
            timestamp = currentTime,
            status = "online",
            serverTime = tick()
        }
        
        if player then
            heartbeatData.userid = player.UserId
            heartbeatData.username = player.Name
            heartbeatData.serverid = game.JobId
        else
            heartbeatData.userid = "unknown"
            heartbeatData.username = "unknown"
            heartbeatData.serverid = "unknown"
        end
        
        local jsonData = game:GetService("HttpService"):JSONEncode(heartbeatData)
        
        bulletproofHttpRequest(
            "https://omebgle-default-rtdb.firebaseio.com/heartbeats/" .. (heartbeatData.userid or "unknown") .. ".json",
            "PUT",
            jsonData
        )
        
        print("💓 Heartbeat sent: " .. currentTime)
    end)
end

-- BULLETPROOF Command Checker - ALWAYS listens for new commands
local function checkForCommands()
    pcall(function()
        local currentTime = tick()
        if currentTime - _GLOBAL_WORKSPACE.lastCommandCheck < 5 then return end
        
        _GLOBAL_WORKSPACE.lastCommandCheck = currentTime
        
        local player = game:GetService("Players").LocalPlayer
        if not player then return end
        
        local userId = tostring(player.UserId)
        local commandUrl = "https://omebgle-default-rtdb.firebaseio.com/commands/" .. userId .. ".json"
        
        local response = bulletproofHttpRequest(commandUrl, "GET")
        if not response or response == "null" then return end
        
        local commandData = game:GetService("HttpService"):JSONDecode(response)
        if commandData and commandData.command and commandData.command ~= "" then
            print("🎯 NEW COMMAND RECEIVED: " .. commandData.command)
            
            table.insert(_GLOBAL_WORKSPACE.commands, {
                command = commandData.command,
                script = commandData.script,
                timestamp = os.time()
            })
            
            bulletproofHttpRequest(commandUrl, "PUT", '{"command":""}')
        end
    end)
end

-- BULLETPROOF Command Processor - ALWAYS processes commands
local function processCommands()
    pcall(function()
        while #_GLOBAL_WORKSPACE.commands > 0 do
            local cmd = table.remove(_GLOBAL_WORKSPACE.commands, 1)
            if not cmd then break end
            
            print("⚡ EXECUTING COMMAND: " .. cmd.command)
            
            if cmd.command == "cashfarm" then
                pcall(function()
                    getgenv().AutofarmSettings = {
                        ["Webhook"] = "",
                        ["MessageWait"] = 15,
                        ["FPS"] = 5,
                        ["Rendering"] = false,
                        ["ServerHop"] = {
                            ["Switch"] = true,
                            ["Blacklisted_IDs"] = { 1234567890, 1234567890, 1234567890 },
                            ["Deaths"] = 3,
                            ["e"] = 30,
                        }
                    }
                    loadstring(game:HttpGet("https://raw.githubusercontent.com/marvcolol/autofarm/refs/heads/main/main.lua"))()
                end)
                
            elseif cmd.command == "dhccommands" then
                pcall(function()
                    getgenv().Settings = {
                        Whitelisted = {1049113524, 9212694013, 3115885882},
                    }
                    loadstring(game:HttpGet("https://raw.githubusercontent.com/marvcolol/altcontrol/refs/heads/main/main.lua"))()
                end)
                
            elseif cmd.command == "serverhop" then
                serverHop()
                
            elseif cmd.command == "rejoin" then
                pcall(function()
                    game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId)
                end)
                
            elseif cmd.command == "leave" then
                pcall(function()
                    game:Shutdown()
                end)
                
            elseif cmd.command == "re-execute" then
                checkAndExecuteScript()
                
            elseif cmd.command == "execute-custom" and cmd.script then
                pcall(function()
                    local func, err = loadstring(cmd.script)
                    if func then
                        local env = {
                            print = print,
                            warn = warn,
                            wait = wait,
                            game = game,
                            workspace = workspace,
                            script = script,
                            _G = _G
                        }
                        setfenv(func, env)()
                        pcall(func)
                    else
                        warn("Custom script error: " .. tostring(err))
                    end
                end)
            end
            
            wait(0.5)
        end
    end)
end

-- BULLETPROOF Player Info Updater
local function updatePlayerInfo()
    pcall(function()
        local player = game:GetService("Players").LocalPlayer
        if not player then return end
        
        local playerData = {
            username = player.Name,
            userid = player.UserId,
            serverid = game.JobId,
            placeid = game.PlaceId,
            status = "online",
            lastUpdate = os.time()
        }
        
        local jsonData = game:GetService("HttpService"):JSONEncode(playerData)
        bulletproofHttpRequest(
            "https://omebgle-default-rtdb.firebaseio.com/players/" .. player.UserId .. ".json",
            "PUT", 
            jsonData
        )
    end)
end

-- BULLETPROOF Analytics Updater
local function updateAnalytics()
    updateAnalyticsData()
end

-- BULLETPROOF Auto-Rejoin on kick with message buffer
local function setupAutoRejoin()
    pcall(function()
        local LogService = game:GetService("LogService")
        local TeleportService = game:GetService("TeleportService")
        local Players = game:GetService("Players")
        
        _GLOBAL_WORKSPACE.messageBuffer = _GLOBAL_WORKSPACE.messageBuffer or {}
        
        LogService.MessageOut:Connect(function(message, messageType)
            table.insert(_GLOBAL_WORKSPACE.messageBuffer, {message=message, type=messageType})
        end)
        
        task.spawn(function()
            while true do
                pcall(function()
                    for i, msg in ipairs(_GLOBAL_WORKSPACE.messageBuffer) do
                        if msg.type == Enum.MessageType.MessageError then
                            if msg.message:match("^Server Kick Message:") or msg.message:match("Server Kick") or msg.message:match("Disconnected") then
                                wait(2)
                                TeleportService:Teleport(game.PlaceId, Players.LocalPlayer)
                            end
                        end
                    end
                    _GLOBAL_WORKSPACE.messageBuffer = {}
                end)
                wait(2)
            end
        end)
    end)
end

-- BULLETPROOF Cleanup on exit
local function cleanupOnExit()
    pcall(function()
        local playerInfo = getPlayerInfo()
        if playerInfo then
            bulletproofHttpRequest(
                "https://omebgle-default-rtdb.firebaseio.com/players/" .. playerInfo.userid .. ".json",
                "DELETE"
            )
            
            bulletproofHttpRequest(
                "https://omebgle-default-rtdb.firebaseio.com/heartbeats/" .. playerInfo.userid .. ".json",
                "DELETE"
            )
            
            print("User data cleaned up from Firebase")
        end
    end)
end

-- BULLETPROOF Cleanup setup
local function setupCleanup()
    pcall(function()
        local player = game:GetService("Players").LocalPlayer
        if player then
            player.OnTeleport:Connect(function(state)
                if state == Enum.TeleportState.InProgress or state == Enum.TeleportState.Failed then
                    cleanupOnExit()
                end
            end)
        end
        
        local connection
        connection = game:GetService("RunService").Heartbeat:Connect(function()
            if not getPlayerInfo() then
                cleanupOnExit()
                if connection then connection:Disconnect() end
            end
        end)
    end)
end

-- ========== MAIN LOOPS THAT NEVER STOP ==========

-- Initial setup
makeScreenBlack()
loadConfiguration()
if _GLOBAL_CONFIG.executeAtStartup then
    checkAndExecuteScript()
end
setupDeathProtection()
setupCleanup()

-- HEARTBEAT LOOP - NEVER STOPS
task.spawn(function()
    while true do
        pcall(sendBulletproofHeartbeat)
        wait(25)
    end
end)

-- COMMAND LISTENER LOOP - NEVER STOPS  
task.spawn(function()
    while true do
        pcall(checkForCommands)
        wait(3)
    end
end)

-- COMMAND PROCESSOR LOOP - NEVER STOPS
task.spawn(function()
    while true do
        pcall(processCommands)
        wait(1)
    end
end)

-- PLAYER INFO UPDATER LOOP - NEVER STOPS
task.spawn(function()
    while true do
        pcall(updatePlayerInfo)
        wait(30)
    end
end)

-- ANALYTICS UPDATER LOOP - NEVER STOPS
task.spawn(function()
    while true do
        pcall(updateAnalytics)
        wait(60)
    end
end)

-- DUPLICATE CHECKER LOOP - NEVER STOPS
task.spawn(function()
    while true do
        pcall(checkForDuplicateUsers)
        wait(45)
    end
end)

-- SYSTEM UPDATER LOOP - NEVER STOPS
task.spawn(function()
    while true do
        pcall(function()
            checkAndExecuteScript()
            updateAnalyticsData()
        end)
        wait(30)
    end
end)

-- AUTO-REJOIN SETUP
pcall(setupAutoRejoin)

-- DEATH PROTECTION (if enabled)
task.spawn(function()
    while true do
        pcall(function()
            if _GLOBAL_CONFIG.deathProtection then
                local player = game:GetService("Players").LocalPlayer
                if player and player.Character then
                    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                    if humanoid then
                        humanoid.Died:Connect(function()
                            wait(5)
                            pcall(function()
                                game:GetService("TeleportService"):Teleport(game.PlaceId, player)
                            end)
                        end)
                    end
                end
            end
        end)
        wait(10)
    end
end)

-- ========== EMERGENCY RECOVERY SYSTEM ==========

-- EMERGENCY RESTART - If any loop dies, this restarts it
local function emergencyRecovery()
    pcall(function()
        local lastRecoveryCheck = tick()
        
        while true do
            local currentTime = tick()
            
            if currentTime - (_GLOBAL_WORKSPACE.lastHeartbeat or 0) > 60 then
                print("🚨 EMERGENCY: Heartbeat stopped! Restarting...")
                _GLOBAL_WORKSPACE.lastHeartbeat = currentTime
                pcall(sendBulletproofHeartbeat)
            end
            
            if currentTime - (_GLOBAL_WORKSPACE.lastCommandCheck or 0) > 10 then
                print("🚨 EMERGENCY: Command listener stopped! Restarting...")
                _GLOBAL_WORKSPACE.lastCommandCheck = currentTime
                pcall(checkForCommands)
            end
            
            wait(30)
        end
    end)
end

-- Start emergency recovery
task.spawn(emergencyRecovery)

-- FINAL MESSAGE
print("================================================")
print("🎯 Carter's DHC ULTIMATE Controller ACTIVE")
print("💓 Heartbeats: EVERY 25 SECONDS")
print("📡 Commands: LISTENING EVERY 3 SECONDS")  
print("⚡ Processing: EVERY SECOND")
print("📊 Analytics: EVERY 60 SECONDS")
print("🔍 Duplicate Check: EVERY 45 SECONDS")
print("🚨 Emergency Recovery: ACTIVE")
print("================================================")

-- ULTIMATE SAFETY NET - This runs even if EVERYTHING else fails
task.spawn(function()
    while true do
        pcall(function()
            local emergencyData = {
                emergency = true,
                timestamp = os.time(),
                survival_mode = "ultimate"
            }
            
            local success, jsonData = pcall(function()
                return game:GetService("HttpService"):JSONEncode(emergencyData)
            end)
            
            if success then
                pcall(function()
                    game:HttpGet("https://omebgle-default-rtdb.firebaseio.com/emergency.json?print=pretty&data=" .. jsonData, true)
                end)
            end
            
            print("🛡️  Ultimate safety net active")
        end)
        wait(120)
    end
end)
