-- Universal compatibility for all executors
local _ENV = _G
if shared then _ENV = shared end

_ENV._ = "Join discord.gg/msgabv2t9Q | discord.gg/stando to get latest update ok bai >.+ | If you pay for this script you get scammed, this script is completely free ok"

local OwnerFileName = "OwnerConfig.txt"
local PositionFileName = "PositionConfig.txt"
local ModeFileName = "ModeConfig.txt"
local AutoExecFile = "AutoExec.txt"
local AutoExecEnabledFile = "AutoExecEnabled.txt"
local ModeToggleFile = "ModeToggle.txt"
local WebhookFile = "WebhookConfig.txt"
local MessageWaitFile = "MessageWaitConfig.txt"
local ServerHopTimeFile = "ServerHopTimeFile.txt"

-- Safe file functions
local function fileExists(name)
    return (isfile and isfile(name)) or false
end

local function loadSetting(fileName, default)
    if isfile and isfile(fileName) then 
        return readfile(fileName) 
    end
    return default
end

local function saveSetting(fileName, value)
    if writefile then
        writefile(fileName, tostring(value))
    end
end

-- Initialize settings
if not _ENV.Owner then
    _ENV.Owner = loadSetting(OwnerFileName, "Hellofriendme19")
end
if not _ENV.Position then
    _ENV.Position = loadSetting(PositionFileName, "Back")
end
if not _ENV.AutofarmSettings then
    _ENV.AutofarmSettings = {
        Webhook = loadSetting(WebhookFile, ""),
        MessageWait = tonumber(loadSetting(MessageWaitFile, "5")) or 5,
        Serverhop = {
            Time = tonumber(loadSetting(ServerHopTimeFile, "30")) or 30
        }
    }
end

local autoExecTimer = tonumber(loadSetting(AutoExecFile, "10")) or 10
local autoExecEnabled = (loadSetting(AutoExecEnabledFile, "true") == "true")
local showModeSelectorToggle = (loadSetting(ModeToggleFile, "true") == "true")
local lastMode = loadSetting(ModeFileName, "Stand")
local webhookUrl = _ENV.AutofarmSettings.Webhook
local messageWait = _ENV.AutofarmSettings.MessageWait
local serverHopTime = _ENV.AutofarmSettings.Serverhop.Time
local autoExecTask = nil

local deathCount = 0
local deathTimer = 0
local antiDeathEnabled = true
local maxDeaths = 6
local deathTimeWindow = 180
local currentMode = "Stand"
local serverMonitoringActive = false
local serverMonitoringTask = nil

-- Universal HTTP request function
local function httpRequest(options)
    local requestFuncs = {
        function() 
            if syn and syn.request then 
                return syn.request(options) 
            end
        end,
        function() 
            if request then 
                return request(options) 
            end
        end,
        function()
            if http and http.request then
                return http.request(options)
            end
        end,
        function()
            if _G and _G.request then
                return _G.request(options)
            end
        end
    }
    
    for _, func in ipairs(requestFuncs) do
        local success, result = pcall(func)
        if success and result then
            return result
        end
    end
    
    return nil
end

-- Firebase functions
local function saveUserServerToFirebase()
    local player = game:GetService("Players").LocalPlayer
    local userId = tostring(player.UserId)
    local serverId = game.JobId
    local url = "https://omebgle-default-rtdb.firebaseio.com/scriptUsers/" .. userId .. ".json"
    
    local userData = {
        userId = userId,
        serverId = serverId,
        lastUpdate = os.time()
    }
    
    local jsonData = game:GetService("HttpService"):JSONEncode(userData)
    
    local response = httpRequest({
        Url = url,
        Method = "PUT",
        Headers = {
            ["Content-Type"] = "application/json"
        },
        Body = jsonData
    })
    
    if response and response.Success then
        print("User ID and Server ID saved to database")
    else
        warn("Failed to save user data to database")
    end
end

local function getAllScriptUsers()
    local url = "https://omebgle-default-rtdb.firebaseio.com/scriptUsers.json"
    
    local response = httpRequest({
        Url = url,
        Method = "GET"
    })
    
    if response and response.Success and response.Body ~= "null" then
        local success, data = pcall(function()
            return game:GetService("HttpService"):JSONDecode(response.Body)
        end)
        
        if success and data then
            local scriptUsers = {}
            local currentTime = os.time()
            
            for userId, userData in pairs(data) do
                local cleanData = {}
                if type(userData) == "table" then
                    cleanData.userId = userData.userId or userId
                    cleanData.serverId = userData.serverId
                    cleanData.lastUpdate = userData.lastUpdate or 0
                    
                    if currentTime - cleanData.lastUpdate < 180 then
                        table.insert(scriptUsers, cleanData)
                    end
                end
            end
            
            return scriptUsers
        end
    end
    
    return {}
end

local function isUserInGame(userId)
    local userIdNum = tonumber(userId)
    if not userIdNum then return false end
    
    for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
        if player.UserId == userIdNum then
            return true
        end
    end
    
    return false
end

local function checkForMultipleScriptUsersInSameServer()
    local currentUserId = game:GetService("Players").LocalPlayer.UserId
    local currentServerId = game.JobId
    local scriptUsers = getAllScriptUsers()
    
    local usersInSameServer = {}
    
    for _, userData in ipairs(scriptUsers) do
        if userData.serverId == currentServerId and 
           userData.userId ~= tostring(currentUserId) and
           isUserInGame(userData.userId) then
            table.insert(usersInSameServer, userData.userId)
        end
    end
    
    if #usersInSameServer > 0 then
        print("Found " .. #usersInSameServer .. " other script user(s) in this server")
        
        local isTestingWithAlt = false
        local myUsername = game:GetService("Players").LocalPlayer.Name
        
        for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
            if player.UserId ~= currentUserId and 
               (player.Name:find("alt", 1, true) or player.Name:find("test", 1, true)) then
                isTestingWithAlt = true
                break
            end
        end
        
        if isTestingWithAlt then
            print("Testing with alt account detected - not server hopping")
            return false
        end
        
        math.randomseed(os.time())
        if math.random() < 0.5 then
            print("This account will server hop (random selection)")
            return true
        else
            print("Another account will server hop")
            return false
        end
    end
    
    return false
end

local function serverHop()
    local TeleportService = game:GetService("TeleportService")
    
    local success, servers = pcall(function()
        local response = httpRequest({
            Url = "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100",
            Method = "GET"
        })
        
        if response and response.Success then
            return game:GetService("HttpService"):JSONDecode(response.Body)
        end
        return nil
    end)
    
    if success and servers and servers.data then
        local availableServers = {}
        local currentPlayers = #game:GetService("Players"):GetPlayers()
        
        for _, server in ipairs(servers.data) do
            if server.id ~= game.JobId and server.playing < server.maxPlayers then
                if server.playing < currentPlayers then
                    table.insert(availableServers, server.id)
                end
            end
        end
        
        if #availableServers == 0 then
            for _, server in ipairs(servers.data) do
                if server.id ~= game.JobId and server.playing < server.maxPlayers then
                    table.insert(availableServers, server.id)
                end
            end
        end
        
        if #availableServers > 0 then
            local randomServer = availableServers[math.random(1, #availableServers)]
            TeleportService:TeleportToPlaceInstance(game.PlaceId, randomServer)
            return
        end
    end
    
    TeleportService:Teleport(game.PlaceId)
end

local function setupAntiDeathFeature()
    local player = game:GetService("Players").LocalPlayer
    local lastDeathTime = 0
    
    player.CharacterAdded:Connect(function(character)
        local humanoid = character:WaitForChild("Humanoid")
        humanoid.Died:Connect(function()
            if currentMode ~= "Cash" then
                return
            end
            
            local currentTime = os.time()
            
            if currentTime - deathTimer > deathTimeWindow then
                deathCount = 0
                deathTimer = currentTime
            end
            
            deathCount = deathCount + 1
            print("Death count: " .. deathCount .. "/" .. maxDeaths .. " in " .. deathTimeWindow .. " seconds")
            
            if deathCount >= maxDeaths and antiDeathEnabled then
                print("Too many deaths (" .. deathCount .. "), server hopping...")
                deathCount = 0
                deathTimer = 0
                task.wait(2)
                serverHop()
            end
        end)
    end)
end

local function startServerMonitoring()
    if serverMonitoringActive then return end
    serverMonitoringActive = true
    
    local isTestingWithAlt = false
    local currentUserId = game:GetService("Players").LocalPlayer.UserId
    
    for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
        if player.UserId ~= currentUserId and 
           (player.Name:find("alt", 1, true) or player.Name:find("test", 1, true)) then
            isTestingWithAlt = true
            print("Alt account detected - disabling server hopping for testing")
            break
        end
    end
    
    setupAntiDeathFeature()
    
    if not isTestingWithAlt then
        saveUserServerToFirebase()
        
        task.wait(5)
        
        if checkForMultipleScriptUsersInSameServer() then
            print("Server hopping to avoid multiple script users in same server...")
            task.wait(2)
            serverHop()
            return
        end
        
        serverMonitoringTask = task.spawn(function()
            while serverMonitoringActive and task.wait(120) do
                saveUserServerToFirebase()
                
                if checkForMultipleScriptUsersInSameServer() then
                    print("Server hopping to avoid multiple script users in same server...")
                    task.wait(2)
                    serverHop()
                    break
                end
            end
        end)
    else
        saveUserServerToFirebase()
    end
end

local function stopServerMonitoring()
    serverMonitoringActive = false
    if serverMonitoringTask then
        task.cancel(serverMonitoringTask)
        serverMonitoringTask = nil
    end
end

local function setFpsCap(value)
    local fpsValue = tonumber(value)
    if fpsValue and fpsValue > 0 then
        if setfpscap then
            setfpscap(fpsValue)
        end
        return true
    end
    return false
end

local function RunStand()
    currentMode = "Stand"
    stopServerMonitoring()
    
    _ENV.Owner = _ENV.Owner

    _ENV.Configuration = {
    ['Fps'] = 20,
    ['Msg'] = 'Tuff Tuff Tuff🤑🥀🤬🤬',
    ['CrewID'] = 7,
    ['Attack'] = 'Heavy',
    ['TPMode'] = 'Cart',
    ['GunMode'] = 'Aug',
    ['FlyMode'] = 'Glide',
    ['Position'] = _ENV.Position,
    ['Resolver'] = false,
    ['ChatCmds'] = true,
    ['AutoMask'] = true,
    ['MaskMode'] = 'Riot',
    ['AntiStomp'] = true,
    ['StandMode'] = 'Star Platinum : OverHeaven',
    ['Smoothing'] = false,
    ['AttackMode'] = 'Sky',
    ['CustomName'] = 'a barbershop haircut that costs a quarter',
    ['Hidescreen'] = true,
    ['SummonPoses'] = 'Pose2',
    ['LowGraphics'] = true,
    ['CustomPrefix'] = '.',
    ['CustomSummon'] = 'Summon!',
    ['AutoPrediction'] = true,
    ['AttackDistance'] = 15,
    ['AutoSaveLocation'] = 'Downhill_Rooftop',
    ['AttackPrediction'] = 0.34,
    ['AttackAutoPrediction'] = 0.23,
    ['Sounds'] = true,
    ['CustomSong'] = 123456,
    ['SummonMusic'] = true,
    ['SummonMusicID'] = 'Default'
    }
    
    loadstring(game:HttpGet("https://xk5ng.github.io/V5.0"))()
end

local function RunSniper()
    currentMode = "Sniper"
    stopServerMonitoring()
    
    _ENV.Owner = _ENV.Owner

    _ENV.Whitelist = {
        1,
        2,
        3,
    }

    _ENV.Configuration = {
        ['Guns'] = {"Aug", "Rifle"},
        ['Strafe'] = "Random",
        ['Void'] = "Unhittable",
        ['Lerp'] = 0.001,
        ['CFrame'] = {0, 1, 0},
        ['Prediction'] = 4,
        ['Multiplier'] = 5,
        ['StompHeight'] = 4.4,
        ['RandomStompOffset'] = 1,
        ['TimeBeforeVoid'] = 1.4,
        ["TimesAmmo"] = 5,
        ['SpareAmmo'] = 3,
        ['ForceAmmo'] = 1,
        ['InstantRespawn'] = false,
        ['Cooldown'] = 120,
        ['DoubleBarrelTime'] = 0.11,
        ['CustomAnimationPlay'] = false,
        ['CustomAnimation'] = nil,
        ['CustomAnimationSpeed'] = 1,
        ['AuraRange'] = 25,
        ['CrewID'] = 7,
        ['VoidView'] = true,
        ['AntiStomp'] = true,
        ['HideScreen'] = true,
        ['CustomPrefix'] = "!",
        ['Fpscap'] = 150
    }
    
    loadstring(game:HttpGet("https://xk5ng.github.io/Sniper-Bot-Rewrite"))()
end

local MoneyFarmScript = function()
    currentMode = "Cash"
    startServerMonitoring()
    
    local blacklistedUsers = {1234567890, 1234567890, 1234567890}
    
    _ENV.AutofarmSettings = _ENV.AutofarmSettings or {
        ["Webhook"] = webhookUrl,
        ["MessageWait"] = messageWait,
        ["Fps"] = 15,
        ["Serverhop"] = {
            ["Enabled"] = true,
            ["Time"] = serverHopTime,
            ["BlacklistedUsers"] = blacklistedUsers
        }
    }
    
    _ENV.AutofarmSettings.Serverhop.BlacklistedUsers = blacklistedUsers
    
    if not workspace:FindFirstChild("MoneyFarmSettings") then
        local mfFolder = Instance.new("Folder")
        mfFolder.Name = "MoneyFarmSettings"
        mfFolder.Parent = workspace
    end
    
    workspace.MoneyFarmSettings:SetAttribute("Webhook", _ENV.AutofarmSettings.Webhook)
    workspace.MoneyFarmSettings:SetAttribute("MessageWait", _ENV.AutofarmSettings.MessageWait)
    workspace.MoneyFarmSettings:SetAttribute("Fps", _ENV.AutofarmSettings.Fps)
    
    if not workspace.MoneyFarmSettings:FindFirstChild("Serverhop") then
        local serverhopFolder = Instance.new("Folder")
        serverhopFolder.Name = "Serverhop"
        serverhopFolder.Parent = workspace.MoneyFarmSettings
    end
    
    workspace.MoneyFarmSettings.Serverhop:SetAttribute("Enabled", _ENV.AutofarmSettings.Serverhop.Enabled)
    workspace.MoneyFarmSettings.Serverhop:SetAttribute("Time", _ENV.AutofarmSettings.Serverhop.Time)
    
    workspace.MoneyFarmSettings.Serverhop:SetAttribute(
        "BlacklistedUsers", 
        table.concat(_ENV.AutofarmSettings.Serverhop.BlacklistedUsers, ",")
    )
    
    loadstring(game:HttpGet('https://raw.githubusercontent.com/marvcolol/atmfarm/refs/heads/main/utilities.lua'))()
end

local function RunDHC()
    currentMode = "DHC"
    stopServerMonitoring()
    
    _ENV.Settings = {
        Whitelisted = {1049113524, 3115885882, 9212694013},
    }
    loadstring(game:HttpGet('https://raw.githubusercontent.com/marvcolol/altcontrol/refs/heads/main/main.lua'))()
    
    print("DHC script executed!")
end

local function hideAllGUIs()
    local parentUI = (gethui and gethui()) or game:GetService("CoreGui") or game:GetService("StarterGui")
    for _,guiName in ipairs({"SettingsPanel","DropdownPanel","ModeSelector","MergedScriptUI"}) do
        local gui = parentUI:FindFirstChild(guiName)
        if gui then gui:Destroy() end
    end
end

local function stopAutoExec()
    if autoExecTask then
        task.cancel(autoExecTask)
        autoExecTask = nil
    end
end

local function startAutoExec()
    stopAutoExec()
    if not autoExecEnabled then return end
    autoExecTask = task.spawn(function()
        task.wait(autoExecTimer)
        hideAllGUIs()
        if lastMode == "Cash" then
            MoneyFarmScript()
        elseif lastMode == "Stand" then
            RunStand()
        elseif lastMode == "Sniper" then
            RunSniper()
        elseif lastMode == "DHC" then
            RunDHC()
        end
    end)
end

local COLORS = {
    Background = Color3.fromRGB(15, 15, 15),
    Panel = Color3.fromRGB(25, 25, 25),
    Header = Color3.fromRGB(20, 20, 20),
    Button = Color3.fromRGB(40, 40, 40),
    ButtonHover = Color3.fromRGB(50, 50, 50),
    ButtonActive = Color3.fromRGB(35, 35, 35),
    ButtonSelected = Color3.fromRGB(60, 60, 60),
    Border = Color3.fromRGB(55, 55, 55),
    Text = Color3.fromRGB(240, 240, 240),
    TextMuted = Color3.fromRGB(180, 180, 180),
    Success = Color3.fromRGB(80, 200, 80),
    Danger = Color3.fromRGB(200, 80, 80),
    Accent = Color3.fromRGB(0, 120, 255)
}

local function getScreenInfo()
    local viewportSize = workspace.CurrentCamera and workspace.CurrentCamera.ViewportSize or Vector2.new(1920, 1080)
    local isMobile = viewportSize.X < 1000
    
    local scaleFactor = math.min(viewportSize.X / 1920, viewportSize.Y / 1080)
    
    if isMobile then
        scaleFactor = math.max(scaleFactor * 0.6, 0.4)
    else
        scaleFactor = math.max(scaleFactor, 0.7)
    end
    
    return viewportSize, isMobile, scaleFactor
end

local function createFrame(name, size, position, parent, color, cornerRadius)
    local frame = Instance.new("Frame")
    frame.Name = name
    frame.Size = size
    frame.Position = position
    frame.BackgroundColor3 = color or COLORS.Panel
    frame.BorderSizePixel = 0
    frame.ZIndex = 1
    frame.Parent = parent
    
    if cornerRadius then
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, cornerRadius)
        corner.Parent = frame
    end
    
    return frame
end

local function createTextLabel(name, text, size, position, parent, textSize, isBold)
    local label = Instance.new("TextLabel")
    label.Name = name
    label.Size = size
    label.Position = position
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = COLORS.Text
    label.Font = isBold and Enum.Font.GothamBold or Enum.Font.Gotham
    label.TextSize = textSize or 14
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.ZIndex = 10
    label.Parent = parent
    
    return label
end

local function createButton(name, text, size, position, parent, isSelected, isToggled)
    local button = Instance.new("TextButton")
    button.Name = name
    button.Size = size
    button.Position = position
    button.BackgroundColor3 = isToggled and COLORS.ButtonSelected or (isSelected and COLORS.ButtonSelected or COLORS.Button)
    button.Text = text
    button.TextColor3 = COLORS.Text
    button.Font = Enum.Font.Gotham
    button.TextSize = 14
    button.AutoButtonColor = false
    button.ZIndex = 10
    button.Parent = parent
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = button
    
    button.MouseEnter:Connect(function()
        game:GetService("TweenService"):Create(
            button,
            TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {BackgroundColor3 = COLORS.ButtonHover}
        ):Play()
    end)
    
    button.MouseLeave:Connect(function()
        game:GetService("TweenService"):Create(
            button,
            TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {BackgroundColor3 = isToggled and COLORS.ButtonSelected or (isSelected and COLORS.ButtonSelected or COLORS.Button)}
        ):Play()
    end)
    
    button.MouseButton1Down:Connect(function()
        game:GetService("TweenService"):Create(
            button,
            TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {BackgroundColor3 = COLORS.ButtonActive}
        ):Play()
    end)
    
    button.MouseButton1Up:Connect(function()
        game:GetService("TweenService"):Create(
            button,
            TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {BackgroundColor3 = isToggled and COLORS.ButtonSelected or (isSelected and COLORS.ButtonSelected or COLORS.Button)}
        ):Play()
    end)
    
    return button
end

local function createTextBox(name, text, size, position, parent)
    local textBox = Instance.new("TextBox")
    textBox.Name = name
    textBox.Size = size
    textBox.Position = position
    textBox.BackgroundColor3 = COLORS.Button
    textBox.Text = text
    textBox.PlaceholderText = name
    textBox.TextColor3 = COLORS.Text
    textBox.Font = Enum.Font.Gotham
    textBox.TextSize = 14
    textBox.ZIndex = 10
    textBox.Parent = parent
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = textBox
    
    local padding = Instance.new("UIPadding")
    padding.PaddingLeft = UDim.new(0, 8)
    padding.PaddingRight = UDim.new(0, 8)
    padding.Parent = textBox
    
    textBox.Focused:Connect(function()
        game:GetService("TweenService"):Create(
            textBox,
            TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {BackgroundColor3 = COLORS.ButtonHover}
        ):Play()
    end)
    
    textBox.FocusLost:Connect(function()
        game:GetService("TweenService"):Create(
            textBox,
            TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {BackgroundColor3 = COLORS.Button}
        ):Play()
    end)
    
    return textBox
end

local function truncateText(text, maxLength)
    if text:len() > maxLength then
        return text:sub(1, maxLength - 3) .. "..."
    end
    return text
end

local function createMainGUI()
    local parentUI = (gethui and gethui()) or game:GetService("CoreGui") or game:GetService("StarterGui")
    local mainGui = Instance.new("ScreenGui")
    mainGui.Name = "MergedScriptUI"
    mainGui.Parent = parentUI
    mainGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    mainGui.ResetOnSpawn = false
    
    return mainGui
end

local mainGui = createMainGUI()

local timerLabel = nil
local positionButtons = {}

local function checkOverlap(panel1, panel2)
    if not panel1 or not panel2 then return false end
    
    local pos1 = panel1.AbsolutePosition
    local size1 = panel1.AbsoluteSize
    local pos2 = panel2.AbsolutePosition
    local size2 = panel2.AbsoluteSize
    
    return not (pos1.X + size1.X < pos2.X or 
               pos1.X > pos2.X + size2.X or 
               pos1.Y + size1.Y < pos2.Y or 
               pos1.Y > pos2.Y + size2.Y)
end

local function adjustPanelPositions()
    local settingsPanel = mainGui:FindFirstChild("SettingsPanel")
    local positionPanel = mainGui:FindFirstChild("DropdownPanel")
    
    if not settingsPanel or not positionPanel then return end
    
    local viewportSize = workspace.CurrentCamera and workspace.CurrentCamera.ViewportSize or Vector2.new(1920, 1080)
    
    if checkOverlap(settingsPanel, positionPanel) then
        local settingsPos = settingsPanel.Position
        local positionPos = positionPanel.Position
        
        if viewportSize.Y < 700 then
            positionPanel.Position = UDim2.new(positionPos.X.Scale, positionPos.X.Offset, 
                                              settingsPos.Y.Scale, settingsPos.Y.Offset + settingsPanel.AbsoluteSize.Y + 10)
        else
            settingsPanel.Position = UDim2.new(settingsPos.X.Scale, settingsPos.X.Offset, 0.02, 0)
            positionPanel.Position = UDim2.new(positionPos.X.Scale, positionPos.X.Offset, 0.02 + 0.35, 0)
        end
    end
end

local function createSettingsUI(parent)
    local viewportSize, isMobile, scaleFactor = getScreenInfo()
    
    local panelWidth = 220 * scaleFactor
    local panelHeight = 350 * scaleFactor
    local buttonHeight = 22 * scaleFactor
    local textSize = 11 * scaleFactor
    local headerHeight = 30 * scaleFactor
    local cornerRadius = 6 * scaleFactor
    local spacing = 7 * scaleFactor
    
    local settingsYPosition = 0.05
    if isMobile then
        settingsYPosition = 0.02
    end
    
    local gui = createFrame("SettingsPanel", 
        UDim2.new(0, panelWidth, 0, panelHeight), 
        UDim2.new(1, -panelWidth - 10, settingsYPosition, 0), 
        parent, COLORS.Panel, cornerRadius)
    
    local header = createFrame("Header", UDim2.new(1, 0, 0, headerHeight), UDim2.new(0, 0, 0, 0), gui, COLORS.Header, cornerRadius)
    local title = createTextLabel("Title", "SETTINGS", UDim2.new(1, 0, 1, 0), UDim2.new(0, 10, 0, 0), header, textSize + 2, true)
    title.TextXAlignment = Enum.TextXAlignment.Left
    
    local content = createFrame("Content", UDim2.new(1, -15, 1, -headerHeight - 10), UDim2.new(0, 8, 0, headerHeight + 5), gui, Color3.fromRGB(0, 0, 0), 0)
    content.BackgroundTransparency = 1
    
    local yPosition = 0
    local elementHeight = buttonHeight
    
    local nameLabel = createTextLabel("NameLabel", "Owner Username:", UDim2.new(1, 0, 0, 16), UDim2.new(0, 0, 0, yPosition), content, textSize, false)
    yPosition = yPosition + 16
    local nameBox = createTextBox("OwnerUsername", _ENV.Owner, UDim2.new(1, 0, 0, elementHeight), UDim2.new(0, 0, 0, yPosition), content)
    yPosition = yPosition + elementHeight + spacing
    
    local toggle = createButton("AutoExecToggle", "AutoExec: "..(autoExecEnabled and "ON" or "OFF"), UDim2.new(1, 0, 0, elementHeight), UDim2.new(0, 0, 0, yPosition), content, false, autoExecEnabled)
    yPosition = yPosition + elementHeight + spacing
    
    local modeToggleBtn = createButton("ModeToggle", "Show Mode Selector: "..(showModeSelectorToggle and "ON" or "OFF"), UDim2.new(1, 0, 0, elementHeight), UDim2.new(0, 0, 0, yPosition), content, true, showModeSelectorToggle)
    yPosition = yPosition + elementHeight + spacing
    
    local timerLabel = createTextLabel("TimerLabel", "AutoExec Timer (seconds):", UDim2.new(1, 0, 0, 16), UDim2.new(0, 0, 0, yPosition), content, textSize, false)
    yPosition = yPosition + 16
    local timerBox = createTextBox("AutoExecTimer", tostring(autoExecTimer), UDim2.new(1, 0, 0, elementHeight), UDim2.new(0, 0, 0, yPosition), content)
    yPosition = yPosition + elementHeight + spacing
    
    local webhookLabel = createTextLabel("WebhookLabel", "Webhook URL:", UDim2.new(1, 0, 0, 16), UDim2.new(0, 0, 0, yPosition), content, textSize, false)
    yPosition = yPosition + 16
    local webhookBox = createTextBox("WebhookURL", truncateText(webhookUrl, 15), UDim2.new(1, 0, 0, elementHeight), UDim2.new(0, 0, 0, yPosition), content)
    webhookBox:SetAttribute("FullText", webhookUrl)
    yPosition = yPosition + elementHeight + spacing
    
    local messageWaitLabel = createTextLabel("MessageWaitLabel", "Message Wait (seconds):", UDim2.new(1, 0, 0, 16), UDim2.new(0, 0, 0, yPosition), content, textSize, false)
    yPosition = yPosition + 16
    local messageWaitBox = createTextBox("MessageWait", tostring(messageWait), UDim2.new(1, 0, 0, elementHeight), UDim2.new(0, 0, 0, yPosition), content)
    yPosition = yPosition + elementHeight + spacing
    
    local serverHopLabel = createTextLabel("ServerHopLabel", "Server Hop Time (seconds):", UDim2.new(1, 0, 0, 16), UDim2.new(0, 0, 0, yPosition), content, textSize, false)
    yPosition = yPosition + 16
    local serverHopBox = createTextBox("ServerHopTime", tostring(serverHopTime), UDim2.new(1, 0, 0, elementHeight), UDim2.new(0, 0, 0, yPosition), content)
    yPosition = yPosition + elementHeight + spacing
    
    local saveBtn = createButton("SaveButton", "SAVE ALL SETTINGS", UDim2.new(1, 0, 0, elementHeight + 4), UDim2.new(0, 0, 0, yPosition + 8), content, true, false)
    saveBtn.Font = Enum.Font.GothamBold
    saveBtn.TextSize = textSize + 1
    
    webhookBox.Focused:Connect(function()
        webhookBox.Text = webhookBox:GetAttribute("FullText") or webhookUrl
    end)
    
    webhookBox.FocusLost:Connect(function()
        local fullText = webhookBox.Text
        webhookBox:SetAttribute("FullText", fullText)
        webhookBox.Text = truncateText(fullText, 15)
    end)

    toggle.MouseButton1Click:Connect(function()
        autoExecEnabled = not autoExecEnabled
        toggle.Text = "AutoExec: "..(autoExecEnabled and "ON" or "OFF")
        toggle.BackgroundColor3 = autoExecEnabled and COLORS.ButtonSelected or COLORS.Button
        saveSetting(AutoExecEnabledFile, tostring(autoExecEnabled))
        
        if autoExecEnabled then
            startAutoExec()
        else
            stopAutoExec()
        end
    end)
    
    modeToggleBtn.MouseButton1Click:Connect(function()
        showModeSelectorToggle = not showModeSelectorToggle
        modeToggleBtn.Text = "Show Mode Selector: "..(showModeSelectorToggle and "ON" or "OFF")
        modeToggleBtn.BackgroundColor3 = showModeSelectorToggle and COLORS.ButtonSelected or COLORS.ButtonSelected
        saveSetting(ModeToggleFile, tostring(showModeSelectorToggle))
        
        local modeSelector = parent:FindFirstChild("ModeSelector")
        if modeSelector then
            modeSelector.Visible = showModeSelectorToggle
        end
    end)
    
    saveBtn.MouseButton1Click:Connect(function()
        _ENV.Owner = nameBox.Text
        saveSetting(OwnerFileName, _ENV.Owner)
        
        autoExecTimer = tonumber(timerBox.Text) or autoExecTimer
        saveSetting(AutoExecFile, tostring(autoExecTimer))
        
        webhookUrl = webhookBox:GetAttribute("FullText") or webhookBox.Text
        saveSetting(WebhookFile, webhookUrl)
        
        messageWait = tonumber(messageWaitBox.Text) or messageWait
        saveSetting(MessageWaitFile, tostring(messageWait))
        
        serverHopTime = tonumber(serverHopBox.Text) or serverHopTime
        saveSetting(ServerHopTimeFile, tostring(serverHopTime))
        
        _ENV.AutofarmSettings.Webhook = webhookUrl
        _ENV.AutofarmSettings.MessageWait = messageWait
        _ENV.AutofarmSettings.Serverhop.Time = serverHopTime
        
        if autoExecEnabled then
            stopAutoExec()
            startAutoExec()
        end
        
        saveBtn.Text = "SAVED!"
        game:GetService("TweenService"):Create(
            saveBtn,
            TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {BackgroundColor3 = COLORS.Success}
        ):Play()
        
        task.wait(1)
        
        saveBtn.Text = "SAVE ALL SETTINGS"
        game:GetService("TweenService"):Create(
            saveBtn,
            TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {BackgroundColor3 = COLORS.ButtonSelected}
        ):Play()
    end)
    
    return gui
end

local function createDropdownUI(parent)
    local viewportSize, isMobile, scaleFactor = getScreenInfo()
    
    local panelWidth = 220 * scaleFactor
    local panelHeight = 160 * scaleFactor
    local buttonHeight = 20 * scaleFactor
    local textSize = 11 * scaleFactor
    local headerHeight = 30 * scaleFactor
    local cornerRadius = 6 * scaleFactor
    
    local positionYPosition = 0.05 + 0.35
    if isMobile then
        positionYPosition = 0.02 + 0.35
        if viewportSize.Y < 700 then
            positionYPosition = 0.02 + 0.40
        end
    end
    
    local gui = createFrame("DropdownPanel", 
        UDim2.new(0, panelWidth, 0, panelHeight), 
        UDim2.new(1, -panelWidth - 10, positionYPosition, 0), 
        parent, COLORS.Panel, cornerRadius)
    
    local header = createFrame("Header", UDim2.new(1, 0, 0, headerHeight), UDim2.new(0, 0, 0, 0), gui, COLORS.Header, cornerRadius)
    local title = createTextLabel("Title", "POSITION SETTINGS", UDim2.new(1, 0, 1, 0), UDim2.new(0, 10, 0, 0), header, textSize + 2, true)
    title.TextXAlignment = Enum.TextXAlignment.Left
    
    local posLabel = createTextLabel("PositionLabel", "Current Position: ".._ENV.Position, UDim2.new(1, -15, 0, 16), UDim2.new(0, 8, 0, headerHeight + 5), gui, textSize, false)
    
    local scroll = Instance.new("ScrollingFrame")
    scroll.Size = UDim2.new(1, -15, 1, -headerHeight - 25)
    scroll.Position = UDim2.new(0, 8, 0, headerHeight + 20)
    scroll.CanvasSize = UDim2.new(0, 0, 0, 200)
    scroll.ScrollBarThickness = 5
    scroll.BackgroundTransparency = 1
    scroll.ZIndex = 10
    scroll.Parent = gui

    local positions = {"Back","Left","Right","Mid","UpMid","UpLeft","UpRight","Walk"}
    for i,opt in ipairs(positions) do
        local isSelected = (opt == _ENV.Position)
        local optBtn = createButton("Pos_"..opt, opt, UDim2.new(1, 0, 0, buttonHeight), UDim2.new(0, 0, 0, (i-1)*(buttonHeight + 4)), scroll, isSelected, false)
        
        positionButtons[opt] = optBtn

        optBtn.MouseButton1Click:Connect(function()
            _ENV.Position = opt
            posLabel.Text = "Current Position: "..opt
            saveSetting(PositionFileName,opt)
            
            for positionName, btn in pairs(positionButtons) do
                local isNowSelected = (positionName == opt)
                btn.BackgroundColor3 = isNowSelected and COLORS.ButtonSelected or COLORS.Button
            end
        end)
    end
    return gui
end

function showModeSelector(parent)
    if not showModeSelectorToggle then return end
    
    local viewportSize, isMobile, scaleFactor = getScreenInfo()
    
    local selectorWidth = 280 * scaleFactor
    local selectorHeight = 280 * scaleFactor
    local buttonHeight = 40 * scaleFactor
    local textSize = 13 * scaleFactor
    local headerHeight = 40 * scaleFactor
    local cornerRadius = 8 * scaleFactor
    
    local screenGui = createFrame("ModeSelector", 
        UDim2.new(0, selectorWidth, 0, selectorHeight), 
        UDim2.new(0.5, -selectorWidth/2, 0.5, -selectorHeight/2), 
        parent, COLORS.Panel, cornerRadius)

    local header = createFrame("Header", UDim2.new(1, 0, 0, headerHeight), UDim2.new(0, 0, 0, 0), screenGui, COLORS.Header, cornerRadius)
    local title = createTextLabel("Title", "SELECT MODE (LAST: "..lastMode:upper()..")", UDim2.new(1, 0, 1, 0), UDim2.new(0, 15, 0, 0), header, textSize + 2, true)
    title.TextXAlignment = Enum.TextXAlignment.Left

    timerLabel = createTextLabel("TimerLabel", "AUTOEXEC TIMER: "..autoExecTimer.."S", UDim2.new(1, -20, 0, 16), UDim2.new(0, 10, 0, headerHeight + 5), screenGui, textSize, false)
    timerLabel.TextColor3 = COLORS.TextMuted

    if autoExecEnabled then
        timerLabel.Visible = true
        task.spawn(function()
            local t = autoExecTimer
            while t >= 0 and screenGui.Parent and autoExecEnabled do
                timerLabel.Text = "AUTOEXEC TIMER: "..t.."S"
                task.wait(1)
                t -= 1
            end
        end)
    else
        timerLabel.Visible = false
    end

    local function makeBtn(name, posY)
        local btn = createButton(name.."Btn", name, UDim2.new(0.8, 0, 0, buttonHeight), UDim2.new(0.1, 0, 0, posY), screenGui, false, false)
        btn.Font = Enum.Font.GothamBold
        btn.TextSize = textSize + 2
        btn.BackgroundColor3 = COLORS.Button
        
        btn.MouseButton1Click:Connect(function()
            lastMode = name
            saveSetting(ModeFileName, name)
            hideAllGUIs()
            if name == "Stand" then RunStand()
            elseif name == "Sniper" then RunSniper()
            elseif name == "Cash" then MoneyFarmScript()
            elseif name == "DHC" then RunDHC() end
        end)
        return btn
    end

    local buttonSpacing = 45 * scaleFactor
    makeBtn("Stand", headerHeight + 20)
    makeBtn("Sniper", headerHeight + 20 + buttonSpacing)
    makeBtn("Cash", headerHeight + 20 + buttonSpacing * 2)
    makeBtn("DHC", headerHeight + 20 + buttonSpacing * 3)
end

createSettingsUI(mainGui)
createDropdownUI(mainGui)
showModeSelector(mainGui)

task.spawn(function()
    wait(0.5)
    adjustPanelPositions()
end)

if autoExecEnabled then startAutoExec() end

local function onScreenResized()
    for _,guiName in ipairs({"SettingsPanel","DropdownPanel","ModeSelector"}) do
        local gui = mainGui:FindFirstChild(guiName)
        if gui then gui:Destroy() end
    end
    
    createSettingsUI(mainGui)
    createDropdownUI(mainGui)
    showModeSelector(mainGui)
    
    task.spawn(function()
        wait(0.5)
        adjustPanelPositions()
    end)
end

if workspace.CurrentCamera then
    workspace.CurrentCamera:GetPropertyChangedSignal("ViewportSize"):Connect(onScreenResized)
end
