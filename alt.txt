-- Carter's DHC Mobile Script for Low-End Devices
-- ULTIMATE BULLETPROOF VERSION - Survives ANY error and ALWAYS listens to commands
-- DELTA EXECUTOR COMPATIBLE EDITION
-- ENHANCED SERVER HOP WITH SERVER BLACKLISTING SYSTEM

print("=== Carter's DHC ULTIMATE Controller Starting ===")

-- Global variables that survive ANY error
local _GLOBAL_WORKSPACE = _GLOBAL_WORKSPACE or {
    commands = {}, 
    lastHeartbeat = 0, 
    lastCommandCheck = 0, 
    messageBuffer = {}, 
    analytics = {}, 
    altConfig = {},
    serverBlacklist = {},
    currentServerId = nil,
    originalServerId = nil,
    deathRecords = {}
}

local _GLOBAL_CONFIG = _GLOBAL_CONFIG or {
    avoidDuplicates = true, 
    deathProtection = true, 
    deathThreshold = 6, 
    deathTimeWindow = 2, 
    executeAtStartup = true, 
    deathCount = 0, 
    deathTimer = 0, 
    knownUsers = {},
    autoCashFarm = false, 
    autoDhcCommands = false, 
    autoCustomScript = false, 
    autoCustomScriptCode = "",
    blackScreenEnabled = false,  -- Black screen ON by default
    serverBlacklistDuration = 3600,  -- 1 hour in seconds
    preferLowPlayerServers = true,
    maxPlayerThreshold = 10  -- Prefer servers with less than 10 players
}

-- Initialize analytics with 24-hour tracking
_GLOBAL_WORKSPACE.analytics = {
    money = 0,
    wantedLevel = 0,
    startMoney = 0,
    moneyGained = 0,
    lastUpdate = 0,
    dailyStartMoney = 0,
    dailyMoneyGained = 0,
    weeklyStartMoney = 0,
    weeklyMoneyGained = 0,
    startTime = os.time()
}

-- Initialize server tracking
_GLOBAL_WORKSPACE.serverTracking = {
    currentServer = game.JobId,
    originalServer = game.JobId,
    joinTime = os.time(),
    deathsInServer = 0,
    firstDeathTime = 0
}

-- ========== DELTA MAP COMPATIBILITY LAYER ==========
local function ensureMapLoaded()
    local maxWaitTime = 30
    local startTime = tick()
    
    print("üîç Checking MAP availability...")
    
    while tick() - startTime < maxWaitTime do
        if workspace:FindFirstChild("MAP") then
            local map = workspace.MAP
            -- Check if MAP has essential components (more than just basic structure)
            if #map:GetChildren() > 3 then
                print("‚úì MAP fully loaded with " .. #map:GetChildren() .. " children")
                return true
            else
                print("‚ö†Ô∏è MAP found but only " .. #map:GetChildren() .. " children - waiting for more...")
            end
        else
            print("‚è≥ Waiting for MAP to appear...")
        end
        wait(2)
    end
    
    print("‚ùå MAP failed to load within " .. maxWaitTime .. " seconds")
    return false
end

local function safeMapAccess(operationName, accessFunction)
    local success, result = pcall(function()
        if not workspace:FindFirstChild("MAP") then
            error("MAP not found in workspace")
        end
        return accessFunction(workspace.MAP)
    end)
    
    if not success then
        warn("[MAP SAFETY] " .. operationName .. " failed: " .. tostring(result))
        return nil
    end
    return result
end

local function getDeltaCompatibleMap()
    -- Try multiple ways to access MAP
    local map = workspace:FindFirstChild("MAP") 
              or workspace:FindFirstChild("Map")
              or workspace:FindFirstChildOfClass("Model")
    
    if not map then
        -- Create a dummy MAP for scripts that require it
        local dummyMap = Instance.new("Folder")
        dummyMap.Name = "MAP"
        dummyMap.Parent = workspace
        print("‚ö†Ô∏è Created dummy MAP for Delta compatibility")
        return dummyMap
    end
    
    print("‚úì MAP access successful: " .. map.Name)
    return map
end

local function patchScriptForDelta(scriptCode)
    -- Replace common problematic patterns for Delta compatibility
    local patches = {
        ["workspace%.MAP%.(.-)"] = "safeMapAccess('%1', function(map) return map.%1 end)",
        ["Workspace%.MAP%.(.-)"] = "safeMapAccess('%1', function(map) return map.%1 end)",
        ["game%.Workspace%.MAP"] = "getDeltaCompatibleMap()",
        ["workspace%.MAP"] = "getDeltaCompatibleMap()",
        ["Workspace%.MAP"] = "getDeltaCompatibleMap()",
    }
    
    for pattern, replacement in pairs(patches) do
        scriptCode = scriptCode:gsub(pattern, replacement)
    end
    
    -- Add Delta-specific optimizations
    scriptCode = scriptCode:gsub("FPS = 5", "FPS = 3")  -- Lower FPS for Delta stability
    scriptCode = scriptCode:gsub("Deaths = 3", "Deaths = 5")  -- Higher death threshold
    
    return scriptCode
end

-- Store compatibility functions in global workspace
_GLOBAL_WORKSPACE.mapCompatibility = {
    ensureMapLoaded = ensureMapLoaded,
    safeMapAccess = safeMapAccess,
    getDeltaCompatibleMap = getDeltaCompatibleMap,
    patchScriptForDelta = patchScriptForDelta
}

-- ========== END DELTA COMPATIBILITY LAYER ==========

-- ULTIMATE ERROR HANDLER - Prevents complete script death
local function ultimateErrorHandler(err)
    warn("[ULTIMATE ERROR HANDLER] " .. tostring(err))
    return "[SURVIVED] " .. tostring(err)
end

-- BULLETPROOF HTTP function that NEVER fails
local function bulletproofHttpRequest(url, method, body, headers)
    local success, result = pcall(function()
        method = method or "GET"
        
        -- Try EVERY possible HTTP method
        local requestFunc = syn and syn.request or http and http.request or http_request or request
        if fluxus and fluxus.request then
            requestFunc = fluxus.request
        end
        
        if requestFunc then
            local response = requestFunc({
                Url = url,
                Method = method,
                Headers = headers or {["Content-Type"] = "application/json"},
                Body = body
            })
            return response.Body, true, response.StatusCode
        else
            -- Fallback to basic game HTTP methods
            if method == "GET" then
                return game:HttpGet(url, true), true, 200
            else
                return game:HttpPost(url, body or "", true), true, 200
            end
        end
    end)
    
    return success and result or nil, success, success and 200 or 0
end

-- BULLETPROOF Get Player Info - ALWAYS works
local function getPlayerInfo()
    local success, result = pcall(function()
        local player = game:GetService("Players").LocalPlayer
        if player then
            return {
                username = player.Name,
                userid = player.UserId,
                serverid = game.JobId,
                placeid = game.PlaceId,
                status = "connected"
            }
        end
        return nil
    end)
    return success and result or nil
end

-- BULLETPROOF Screen Black
local function makeScreenBlack()
    pcall(function()
        local CoreGui = game:GetService("CoreGui")
        if CoreGui then
            for _, gui in ipairs(CoreGui:GetChildren()) do
                if gui.Name == "BlackScreenGui" then
                    gui:Destroy()
                end
            end

            local screenGui = Instance.new("ScreenGui")
            screenGui.Name = "BlackScreenGui"
            screenGui.IgnoreGuiInset = true
            screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

            local frame = Instance.new("Frame")
            frame.Size = UDim2.new(1, 0, 1, 0)
            frame.BackgroundColor3 = Color3.new(0, 0, 0)
            frame.BorderSizePixel = 0
            frame.Parent = screenGui

            screenGui.Parent = CoreGui
        end
    end)
end

-- BULLETPROOF Screen Unblack
local function removeScreenBlack()
    local CoreGui = game:GetService("CoreGui")

    local function destroyBlackScreens()
        pcall(function()
            for _, gui in ipairs(CoreGui:GetChildren()) do
                if gui.Name == "BlackScreenGui" then
                    gui:Destroy()
                end
            end
        end)
    end

    -- destroy existing
    destroyBlackScreens()

    -- loop to destroy any new ones (without task.spawn)
    spawn(function()
        while true do
            destroyBlackScreens()
            wait(0.03)
        end
    end)

    -- catch any new child added
    if CoreGui then
        CoreGui.ChildAdded:Connect(function(child)
            if child and child.Name == "BlackScreenGui" then
                pcall(function() child:Destroy() end)
            end
        end)
    end
end



-- ========== ENHANCED SERVER BLACKLIST SYSTEM ==========

local function loadServerBlacklist()
    pcall(function()
        local url = "https://omebgle-default-rtdb.firebaseio.com/serverBlacklist.json"
        local response = bulletproofHttpRequest(url, "GET")
        if response and response ~= "null" then
            local data = game:GetService("HttpService"):JSONDecode(response)
            if data then
                _GLOBAL_WORKSPACE.serverBlacklist = data
                print("Loaded server blacklist: " .. #_GLOBAL_WORKSPACE.serverBlacklist .. " servers")
            end
        end
    end)
end

local function saveServerBlacklist()
    pcall(function()
        local url = "https://omebgle-default-rtdb.firebaseio.com/serverBlacklist.json"
        local jsonData = game:GetService("HttpService"):JSONEncode(_GLOBAL_WORKSPACE.serverBlacklist)
        bulletproofHttpRequest(url, "PUT", jsonData)
    end)
end

local function addServerToBlacklist(serverId)
    pcall(function()
        local currentTime = os.time()
        local blacklistEntry = {
            serverId = serverId,
            blacklistedAt = currentTime,
            expiresAt = currentTime + _GLOBAL_CONFIG.serverBlacklistDuration,
            reason = "excessive_deaths"
        }
        
        -- Check if server is already blacklisted
        for i, entry in ipairs(_GLOBAL_WORKSPACE.serverBlacklist) do
            if entry.serverId == serverId then
                -- Update existing entry
                _GLOBAL_WORKSPACE.serverBlacklist[i] = blacklistEntry
                print("Updated blacklist for server: " .. serverId)
                saveServerBlacklist()
                return
            end
        end
        
        -- Add new entry
        table.insert(_GLOBAL_WORKSPACE.serverBlacklist, blacklistEntry)
        print("Added server to blacklist: " .. serverId .. " for 1 hour")
        saveServerBlacklist()
    end)
end

local function cleanupExpiredBlacklists()
    pcall(function()
        local currentTime = os.time()
        local newBlacklist = {}
        local removedCount = 0
        
        for i, entry in ipairs(_GLOBAL_WORKSPACE.serverBlacklist) do
            if entry.expiresAt > currentTime then
                table.insert(newBlacklist, entry)
            else
                removedCount = removedCount + 1
            end
        end
        
        if removedCount > 0 then
            _GLOBAL_WORKSPACE.serverBlacklist = newBlacklist
            saveServerBlacklist()
            print("Cleaned up " .. removedCount .. " expired blacklist entries")
        end
    end)
end

local function isServerBlacklisted(serverId)
    cleanupExpiredBlacklists()  -- Clean up before checking
    
    for i, entry in ipairs(_GLOBAL_WORKSPACE.serverBlacklist) do
        if entry.serverId == serverId then
            return true, entry.expiresAt - os.time()
        end
    end
    return false, 0
end

-- ========== FIXED DEATH PROTECTION SYSTEM ==========

local function setupEnhancedDeathProtection()
    if not _GLOBAL_CONFIG.deathProtection then return end
    
    pcall(function()
        local player = game:GetService("Players").LocalPlayer
        if not player then return end
        
        local function onCharacterAdded(character)
            pcall(function()
                local humanoid = character:WaitForChild("Humanoid")
                humanoid.Died:Connect(function()
                    local currentTime = tick()
                    local serverId = game.JobId
                    
                    -- Initialize death records for this server if not exists
                    if not _GLOBAL_WORKSPACE.deathRecords[serverId] then
                        _GLOBAL_WORKSPACE.deathRecords[serverId] = {
                            count = 0,
                            firstDeathTime = currentTime,
                            lastDeathTime = currentTime
                        }
                    end
                    
                    local deathRecord = _GLOBAL_WORKSPACE.deathRecords[serverId]
                    deathRecord.count = deathRecord.count + 1
                    deathRecord.lastDeathTime = currentTime
                    
                    print("Death #" .. deathRecord.count .. " in server " .. serverId)
                    
                    -- Check if we've exceeded the death threshold within the time window
                    local timeSinceFirstDeath = currentTime - deathRecord.firstDeathTime
                    local deathsInTimeWindow = deathRecord.count
                    
                    -- Only trigger server hop if we meet BOTH conditions:
                    -- 1. Death count reaches threshold
                    -- 2. Time window condition is met
                    if deathsInTimeWindow >= _GLOBAL_CONFIG.deathThreshold then
                        if timeSinceFirstDeath <= (_GLOBAL_CONFIG.deathTimeWindow * 60) then
                            print("üö® Excessive deaths detected (" .. deathsInTimeWindow .. " deaths in " .. math.floor(timeSinceFirstDeath) .. "s)")
                            print("üîÑ Server hopping and blacklisting current server...")
                            
                            -- Add current server to blacklist
                            addServerToBlacklist(serverId)
                            
                            -- Server hop to a better server
                            serverHop()
                        else
                            -- Reset counter if outside time window but keep counting
                            deathRecord.firstDeathTime = currentTime
                            deathRecord.count = 1  -- Start new window with current death
                            print("Reset death counter (outside time window)")
                        end
                    else
                        print("Death count: " .. deathsInTimeWindow .. "/" .. _GLOBAL_CONFIG.deathThreshold .. " (threshold not reached)")
                    end
                end)
            end)
        end
        
        -- Handle initial character and respawns
        if player.Character then
            onCharacterAdded(player.Character)
        end
        player.CharacterAdded:Connect(onCharacterAdded)
    end)
end

-- ========== ENHANCED SERVER HOP SYSTEM ==========

local function getOptimalServer()
    pcall(function()
        local HttpService = game:GetService("HttpService")
        local placeId = game.PlaceId
        
        -- Try to get server list
        local serversUrl = "https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?limit=100"
        local response = bulletproofHttpRequest(serversUrl, "GET")
        
        if not response then
            print("‚ùå Failed to fetch server list")
            return nil
        end
        
        local data = HttpService:JSONDecode(response)
        if not data or not data.data then
            print("‚ùå Invalid server list response")
            return nil
        end
        
        local optimalServers = {}
        local goodServers = {}
        local fallbackServers = {}
        
        for _, server in ipairs(data.data) do
            -- Skip current server and blacklisted servers
            if server.id ~= game.JobId and not isServerBlacklisted(server.id) then
                local playerCount = server.playing or 0
                local maxPlayers = server.maxPlayers or 10
                
                -- Optimal: Very low player count (preferred)
                if playerCount <= 3 and playerCount < maxPlayers then
                    table.insert(optimalServers, server)
                -- Good: Low player count but not empty
                elseif playerCount <= _GLOBAL_CONFIG.maxPlayerThreshold and playerCount < maxPlayers then
                    table.insert(goodServers, server)
                -- Fallback: Any available server
                elseif playerCount < maxPlayers then
                    table.insert(fallbackServers, server)
                end
            end
        end
        
        -- Priority order: Optimal -> Good -> Fallback
        if #optimalServers > 0 then
            print("üéØ Found " .. #optimalServers .. " optimal servers (‚â§3 players)")
            return optimalServers[math.random(1, #optimalServers)]
        elseif #goodServers > 0 then
            print("‚úÖ Found " .. #goodServers .. " good servers (‚â§" .. _GLOBAL_CONFIG.maxPlayerThreshold .. " players)")
            return goodServers[math.random(1, #goodServers)]
        elseif #fallbackServers > 0 then
            print("‚ö†Ô∏è Found " .. #fallbackServers .. " fallback servers")
            return fallbackServers[math.random(1, #fallbackServers)]
        else
            print("‚ùå No suitable servers found")
            return nil
        end
    end)
    
    return nil
end

-- BULLETPROOF Server Hop - ENHANCED VERSION
local function serverHop()
    pcall(function()
        local TeleportService = game:GetService("TeleportService")
        local placeId = game.PlaceId
        
        print("üîç Searching for optimal server...")
        
        local optimalServer = getOptimalServer()
        if optimalServer then
            print("üöÄ Server hopping to: " .. optimalServer.id .. " (" .. optimalServer.playing .. "/" .. optimalServer.maxPlayers .. " players)")
            
            -- Record the server hop
            _GLOBAL_WORKSPACE.serverTracking.originalServer = _GLOBAL_WORKSPACE.serverTracking.currentServer
            _GLOBAL_WORKSPACE.serverTracking.currentServer = optimalServer.id
            _GLOBAL_WORKSPACE.serverTracking.joinTime = os.time()
            
            TeleportService:TeleportToPlaceInstance(placeId, optimalServer.id)
        else
            print("‚ùå No available servers found for server hop")
            -- Fallback to basic server hop without filters
            local serversUrl = "https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?limit=50"
            local response = bulletproofHttpRequest(serversUrl, "GET")
            
            if response then
                local data = game:GetService("HttpService"):JSONDecode(response)
                if data and data.data then
                    local servers = {}
                    for _, server in ipairs(data.data) do
                        if server.id ~= game.JobId and not isServerBlacklisted(server.id) and server.playing < server.maxPlayers then
                            table.insert(servers, server)
                        end
                    end
                    
                    if #servers > 0 then
                        local randomServer = servers[math.random(1, #servers)]
                        print("üîÑ Fallback server hop to: " .. randomServer.id)
                        TeleportService:TeleportToPlaceInstance(placeId, randomServer.id)
                    else
                        print("üíÄ No servers available even with fallback")
                    end
                end
            end
        end
    end)
end

-- BULLETPROOT Death Protection - ALWAYS works with Firebase config
local function setupDeathProtection()
    if not _GLOBAL_CONFIG.deathProtection then return end
    
    pcall(function()
        local player = game:GetService("Players").LocalPlayer
        if not player then return end
        
        player.CharacterAdded:Connect(function(character)
            pcall(function()
                local humanoid = character:WaitForChild("Humanoid")
                humanoid.Died:Connect(function()
                    local currentTime = tick()
                    
                    -- Reset death counter if outside the time window
                    if currentTime - _GLOBAL_CONFIG.deathTimer > (_GLOBAL_CONFIG.deathTimeWindow * 60) then
                        _GLOBAL_CONFIG.deathCount = 0
                        _GLOBAL_CONFIG.deathTimer = currentTime
                    end
                    
                    _GLOBAL_CONFIG.deathCount = _GLOBAL_CONFIG.deathCount + 1
                    print("Death count: " .. _GLOBAL_CONFIG.deathCount .. "/" .. _GLOBAL_CONFIG.deathThreshold)
                    
                    -- Server hop if death threshold is reached within the time window
                    if _GLOBAL_CONFIG.deathCount >= _GLOBAL_CONFIG.deathThreshold then
                        print("Too many deaths detected (" .. _GLOBAL_CONFIG.deathCount .. " in " .. _GLOBAL_CONFIG.deathTimeWindow .. " minutes), server hopping...")
                        serverHop()
                    end
                end)
            end)
        end)
    end)
end

-- BULLETPROOF Duplicate User Checker - ALWAYS works
local function checkForDuplicateUsers()
    if not _GLOBAL_CONFIG.avoidDuplicates then return end
    
    pcall(function()
        local playerInfo = getPlayerInfo()
        if not playerInfo then return end
        
        local url = "https://omebgle-default-rtdb.firebaseio.com/players.json"
        
        local response = bulletproofHttpRequest(url, "GET")
        if response and response ~= "null" then
            local players = game:GetService("HttpService"):JSONDecode(response)
            if players and type(players) == "table" then
                for userId, userData in pairs(players) do
                    if userId ~= tostring(playerInfo.userid) and 
                       userData and type(userData) == "table" and 
                       userData.serverid and playerInfo.serverid and
                       userData.serverid == playerInfo.serverid then
                        print("Duplicate script user detected: " .. (userData.username or "Unknown"))
                        serverHop()
                        return
                    end
                end
            end
        end
    end)
end

-- BULLETPROOF Analytics Updater with 24-hour tracking - ALWAYS works
local function updateAnalyticsData()
    pcall(function()
        local player = game:GetService("Players").LocalPlayer
        if not player then return end
        
        local currentMoney = 0
        local currentWanted = 0
        
        pcall(function()
            if player:FindFirstChild("DataFolder") and player.DataFolder:FindFirstChild("Currency") then
                currentMoney = player.DataFolder.Currency.Value
            end
        end)
        
        pcall(function()
            if player:FindFirstChild("DataFolder") and player.DataFolder:FindFirstChild("Information") and player.DataFolder.Information:FindFirstChild("Wanted") then
                currentWanted = player.DataFolder.Information.Wanted.Value
            end
        end)
        
        if _GLOBAL_WORKSPACE.analytics.startMoney == 0 then
            _GLOBAL_WORKSPACE.analytics.startMoney = currentMoney
            _GLOBAL_WORKSPACE.analytics.money = currentMoney
            _GLOBAL_WORKSPACE.analytics.dailyStartMoney = currentMoney
            _GLOBAL_WORKSPACE.analytics.weeklyStartMoney = currentMoney
            print("Starting money: $" .. currentMoney)
        end
        
        _GLOBAL_WORKSPACE.analytics.moneyGained = currentMoney - _GLOBAL_WORKSPACE.analytics.startMoney
        _GLOBAL_WORKSPACE.analytics.dailyMoneyGained = currentMoney - _GLOBAL_WORKSPACE.analytics.dailyStartMoney
        _GLOBAL_WORKSPACE.analytics.weeklyMoneyGained = currentMoney - _GLOBAL_WORKSPACE.analytics.weeklyStartMoney
        _GLOBAL_WORKSPACE.analytics.money = currentMoney
        _GLOBAL_WORKSPACE.analytics.wantedLevel = currentWanted
        
        local currentTime = os.time()
        if currentTime - _GLOBAL_WORKSPACE.analytics.startTime >= 86400 then
            _GLOBAL_WORKSPACE.analytics.dailyStartMoney = currentMoney
            _GLOBAL_WORKSPACE.analytics.dailyMoneyGained = 0
            _GLOBAL_WORKSPACE.analytics.startTime = currentTime
            print("24-hour timer reset. New daily baseline set.")
        end
        
        if currentTime - _GLOBAL_WORKSPACE.analytics.startTime >= 604800 then
            _GLOBAL_WORKSPACE.analytics.weeklyStartMoney = currentMoney
            _GLOBAL_WORKSPACE.analytics.weeklyMoneyGained = 0
            _GLOBAL_WORKSPACE.analytics.startTime = currentTime
            print("Weekly timer reset. New weekly baseline set.")
        end
        
        if tick() - _GLOBAL_WORKSPACE.analytics.lastUpdate > 30 then
            _GLOBAL_WORKSPACE.analytics.lastUpdate = tick()
            
            local playerInfo = getPlayerInfo()
            if playerInfo then
                local analyticsData = {
                    username = playerInfo.username,
                    money = _GLOBAL_WORKSPACE.analytics.money,
                    wantedLevel = _GLOBAL_WORKSPACE.analytics.wantedLevel,
                    moneyGained = _GLOBAL_WORKSPACE.analytics.moneyGained,
                    dailyMoneyGained = _GLOBAL_WORKSPACE.analytics.dailyMoneyGained,
                    weeklyMoneyGained = _GLOBAL_WORKSPACE.analytics.weeklyMoneyGained,
                    lastUpdate = os.time(),
                    serverId = game.JobId,
                    startTime = _GLOBAL_WORKSPACE.analytics.startTime
                }
                local jsonData = game:GetService("HttpService"):JSONEncode(analyticsData)
                bulletproofHttpRequest(
                    "https://omebgle-default-rtdb.firebaseio.com/analytics/" .. playerInfo.userid .. ".json",
                    "PUT",
                    jsonData
                )
            end
        end
    end)
end

-- BULLETPROOF Script Checker - ALWAYS works
local function checkAndExecuteScript()
    pcall(function()
        local url = "https://omebgle-default-rtdb.firebaseio.com/script.json"
        
        local response = bulletproofHttpRequest(url, "GET")
        if response and response ~= "null" then
            local data = game:GetService("HttpService"):JSONDecode(response)
            if data and data.code and data.code ~= "" then
                table.insert(_GLOBAL_WORKSPACE.commands, {
                    command = "execute-custom",
                    script = data.code,
                    timestamp = os.time()
                })
                print("Script added to workspace from Firebase")
                
                bulletproofHttpRequest(
                    url,
                    "PUT",
                    '{"code":""}'
                )
            end
        end
    end)
end

-- BULLETPROOF Heartbeat - ALWAYS works
local function sendBulletproofHeartbeat()
    pcall(function()
        local currentTime = os.time()
        _GLOBAL_WORKSPACE.lastHeartbeat = currentTime
        
        local player = game:GetService("Players").LocalPlayer
        local heartbeatData = {
            timestamp = currentTime,
            status = "online",
            serverTime = tick()
        }
        
        if player then
            heartbeatData.userid = player.UserId
            heartbeatData.username = player.Name
            heartbeatData.serverid = game.JobId
        else
            heartbeatData.userid = "unknown"
            heartbeatData.username = "unknown"
            heartbeatData.serverid = "unknown"
        end
        
        local jsonData = game:GetService("HttpService"):JSONEncode(heartbeatData)
        
        bulletproofHttpRequest(
            "https://omebgle-default-rtdb.firebaseio.com/heartbeats/" .. (heartbeatData.userid or "unknown") .. ".json",
            "PUT",
            jsonData
        )
        
        print("üíì Heartbeat sent: " .. currentTime)
    end)
end

-- BULLETPROOF Command Checker - ALWAYS listens for new commands
local function checkForCommands()
    pcall(function()
        local currentTime = tick()
        if currentTime - _GLOBAL_WORKSPACE.lastCommandCheck < 5 then return end
        
        _GLOBAL_WORKSPACE.lastCommandCheck = currentTime
        
        local player = game:GetService("Players").LocalPlayer
        if not player then return end
        
        local userId = tostring(player.UserId)
        local commandUrl = "https://omebgle-default-rtdb.firebaseio.com/commands/" .. userId .. ".json"
        
        local response = bulletproofHttpRequest(commandUrl, "GET")
        if not response or response == "null" then return end
        
        local commandData = game:GetService("HttpService"):JSONDecode(response)
        if commandData and commandData.command and commandData.command ~= "" then
            print("üéØ NEW COMMAND RECEIVED: " .. commandData.command)
            
            table.insert(_GLOBAL_WORKSPACE.commands, {
                command = commandData.command,
                script = commandData.script,
                timestamp = os.time()
            })
            
            bulletproofHttpRequest(commandUrl, "PUT", '{"command":""}')
        end
        
        -- Check for global commands (like black screen toggle)
        local globalCommandUrl = "https://omebgle-default-rtdb.firebaseio.com/commands/global.json"
        local globalResponse = bulletproofHttpRequest(globalCommandUrl, "GET")
        if globalResponse and globalResponse ~= "null" then
            local globalCommandData = game:GetService("HttpService"):JSONDecode(globalResponse)
            if globalCommandData and globalCommandData.command and globalCommandData.command ~= "" then
                print("üéØ GLOBAL COMMAND RECEIVED: " .. globalCommandData.command)
                
                if globalCommandData.command == "enable-blackscreen" then
                    makeScreenBlack()
                    _GLOBAL_CONFIG.blackScreenEnabled = true
                elseif globalCommandData.command == "disable-blackscreen" then
                    removeScreenBlack()
                    _GLOBAL_CONFIG.blackScreenEnabled = false
                end
                
                bulletproofHttpRequest(globalCommandUrl, "PUT", '{"command":""}')
            end
        end
    end)
end

-- ========== SERVER TRACKING SYSTEM ==========

local function trackServerPerformance()
    pcall(function()
        local currentServer = game.JobId
        local currentTime = os.time()
        
        -- Initialize tracking for new server
        if _GLOBAL_WORKSPACE.serverTracking.currentServer ~= currentServer then
            _GLOBAL_WORKSPACE.serverTracking = {
                currentServer = currentServer,
                originalServer = _GLOBAL_WORKSPACE.serverTracking.originalServer,
                joinTime = currentTime,
                deathsInServer = 0,
                firstDeathTime = 0
            }
            
            print("üìä Now tracking server: " .. currentServer)
            
            -- Report server join to analytics
            local playerInfo = getPlayerInfo()
            if playerInfo then
                local serverJoinData = {
                    username = playerInfo.username,
                    serverId = currentServer,
                    joinTime = currentTime,
                    playerCount = #game:GetService("Players"):GetPlayers(),
                    blacklisted = isServerBlacklisted(currentServer)
                }
                
                local jsonData = game:GetService("HttpService"):JSONEncode(serverJoinData)
                bulletproofHttpRequest(
                    "https://omebgle-default-rtdb.firebaseio.com/serverJoins/" .. currentServer .. ".json",
                    "POST",
                    jsonData
                )
            end
        end
    end)
end

-- BULLETPROOF Command Processor - ALWAYS processes commands
local function processCommands()
    pcall(function()
        while #_GLOBAL_WORKSPACE.commands > 0 do
            local cmd = table.remove(_GLOBAL_WORKSPACE.commands, 1)
            if not cmd then break end
            
            print("‚ö° EXECUTING COMMAND: " .. cmd.command)
            
            if cmd.command == "cashfarm" then
                pcall(function()
                    print("üöÄ Loading DELTA-COMPATIBLE cashfarm...")
                    
                    if not ensureMapLoaded() then
                        print("‚ùå Cashfarm aborted - MAP not available")
                        return
                    end
                    
                    getgenv().safeMapAccess = safeMapAccess
                    getgenv().getDeltaCompatibleMap = getDeltaCompatibleMap
                    getgenv().ensureMapLoaded = ensureMapLoaded
                    getgenv().Camerainvoid = true
                    
                    local autofarmScript = game:HttpGet("https://raw.githubusercontent.com/yuvic123/SKIDO-V3/refs/heads/main/farm", true)
                    autofarmScript = patchScriptForDelta(autofarmScript)
                    autofarmScript = "-- DELTA PATCH APPLIED: " .. os.date() .. "\n" ..
                                   "-- CAMERA IN VOID: ENABLED\n" ..
                                   autofarmScript
                    
                    print("‚úì Cashfarm script patched for Delta compatibility")
                    loadstring(autofarmScript)()
                end)
                
            elseif cmd.command == "dhccommands" then
                pcall(function()
                    getgenv().Settings = {
                        Whitelisted = {1049113524, 9212694013, 3115885882},
                    }
                    loadstring(game:HttpGet("https://raw.githubusercontent.com/marvcolol/altcontrol/refs/heads/main/main.lua"))()
                end)
                
            elseif cmd.command == "serverhop" then
                serverHop()  -- Now uses enhanced server hop
                
            elseif cmd.command == "blacklistinfo" then
                pcall(function()
                    local blacklistedCount = 0
                    local currentTime = os.time()
                    
                    for i, entry in ipairs(_GLOBAL_WORKSPACE.serverBlacklist) do
                        if entry.expiresAt > currentTime then
                            blacklistedCount = blacklistedCount + 1
                            local timeLeft = entry.expiresAt - currentTime
                            print("üñ§ " .. entry.serverId .. " - " .. math.floor(timeLeft/60) .. "m " .. math.floor(timeLeft%60) .. "s left")
                        end
                    end
                    
                    print("Total active blacklists: " .. blacklistedCount)
                    print("Current server: " .. game.JobId)
                    print("Deaths in current server: " .. (_GLOBAL_WORKSPACE.deathRecords[game.JobId] and _GLOBAL_WORKSPACE.deathRecords[game.JobId].count or 0))
                end)
                
            elseif cmd.command == "clearblacklist" then
                pcall(function()
                    _GLOBAL_WORKSPACE.serverBlacklist = {}
                    saveServerBlacklist()
                    print("‚úÖ Server blacklist cleared")
                end)
                
            elseif cmd.command == "rejoin" then
                pcall(function()
                    game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId)
                end)
                
            elseif cmd.command == "leave" then
                pcall(function()
                    game:Shutdown()
                end)
                
            elseif cmd.command == "re-execute" then
                checkAndExecuteScript()
                
            elseif cmd.command == "execute-custom" and cmd.script then
                pcall(function()
                    local patchedScript = patchScriptForDelta(cmd.script)
                    local func, err = loadstring(patchedScript)
                    if func then
                        local env = {
                            print = print,
                            warn = warn,
                            wait = wait,
                            game = game,
                            workspace = workspace,
                            script = script,
                            _G = _G,
                            safeMapAccess = safeMapAccess,
                            getDeltaCompatibleMap = getDeltaCompatibleMap
                        }
                        setfenv(func, env)()
                        pcall(func)
                    else
                        warn("Custom script error: " .. tostring(err))
                    end
                end)
            end
            
            wait(1)
        end
    end)
end

-- BULLETPROOF Player Info Updater
local function updatePlayerInfo()
    pcall(function()
        local player = game:GetService("Players").LocalPlayer
        if not player then return end
        
        local playerData = {
            username = player.Name,
            userid = player.UserId,
            serverid = game.JobId,
            placeid = game.PlaceId,
            status = "online",
            lastUpdate = os.time(),
            deltaCompatible = true  -- Mark as Delta compatible
        }
        
        local jsonData = game:GetService("HttpService"):JSONEncode(playerData)
        bulletproofHttpRequest(
            "https://omebgle-default-rtdb.firebaseio.com/players/" .. player.UserId .. ".json",
            "PUT", 
            jsonData
        )
    end)
end

-- BULLETPROOF Analytics Updater
local function updateAnalytics()
    updateAnalyticsData()
end

-- BULLETPROOF Auto-Rejoin on kick with message buffer
local function setupAutoRejoin()
    pcall(function()
        local LogService = game:GetService("LogService")
        local TeleportService = game:GetService("TeleportService")
        local Players = game:GetService("Players")
        
        _GLOBAL_WORKSPACE.messageBuffer = _GLOBAL_WORKSPACE.messageBuffer or {}
        
        LogService.MessageOut:Connect(function(message, messageType)
            table.insert(_GLOBAL_WORKSPACE.messageBuffer, {message=message, type=messageType})
        end)
        
        task.spawn(function()
            while true do
                pcall(function()
                    for i, msg in ipairs(_GLOBAL_WORKSPACE.messageBuffer) do
                        if msg.type == Enum.MessageType.MessageError then
                            if msg.message:match("^Server Kick Message:") or msg.message:match("Server Kick") or msg.message:match("Disconnected") then
                                wait(3)  -- Increased delay for Delta
                                TeleportService:Teleport(game.PlaceId, Players.LocalPlayer)
                            end
                        end
                    end
                    _GLOBAL_WORKSPACE.messageBuffer = {}
                end)
                wait(3)  -- Increased delay for Delta
            end
        end)
    end)
end

-- BULLETPROOF Cleanup on exit
local function cleanupOnExit()
    pcall(function()
        local playerInfo = getPlayerInfo()
        if playerInfo then
            bulletproofHttpRequest(
                "https://omebgle-default-rtdb.firebaseio.com/players/" .. playerInfo.userid .. ".json",
                "DELETE"
            )
            
            bulletproofHttpRequest(
                "https://omebgle-default-rtdb.firebaseio.com/heartbeats/" .. playerInfo.userid .. ".json",
                "DELETE"
            )
            
            print("User data cleaned up from Firebase")
        end
    end)
end

-- BULLETPROOF Cleanup setup
local function setupCleanup()
    pcall(function()
        local player = game:GetService("Players").LocalPlayer
        if player then
            player.OnTeleport:Connect(function(state)
                if state == Enum.TeleportState.InProgress or state == Enum.TeleportState.Failed then
                    cleanupOnExit()
                end
            end)
        end
        
        local connection
        connection = game:GetService("RunService").Heartbeat:Connect(function()
            if not getPlayerInfo() then
                cleanupOnExit()
                if connection then connection:Disconnect() end
            end
        end)
    end)
end

-- ========== MAIN LOOPS THAT NEVER STOP ==========

-- Initial setup - Apply black screen by default
makeScreenBlack()
loadConfiguration()
loadServerBlacklist()  -- Load server blacklist on startup

-- Periodically refresh configuration
task.spawn(function()
    while true do
        pcall(loadConfiguration)
        wait(30)
    end
end)

-- AUTO_EXECUTION_TRIGGER: execute auto actions based on remote config (only one will run; priority: cashfarm -> dhccommands -> custom)
pcall(function()
    if _GLOBAL_CONFIG.autoCashFarm then
        print("Auto-execute: cashfarm enabled. Queuing cashfarm command.")
        table.insert(_GLOBAL_WORKSPACE.commands, { command = "cashfarm", timestamp = os.time() })
    elseif _GLOBAL_CONFIG.autoDhcCommands then
        print("Auto-execute: dhccommands enabled. Queuing dhccommands command.")
        table.insert(_GLOBAL_WORKSPACE.commands, { command = "dhccommands", timestamp = os.time() })
    elseif _GLOBAL_CONFIG.autoCustomScript and (_GLOBAL_CONFIG.autoCustomScriptCode or "") ~= "" then
        print("Auto-execute: custom script enabled. Queuing custom script execution.")
        table.insert(_GLOBAL_WORKSPACE.commands, { command = "execute-custom", script = _GLOBAL_CONFIG.autoCustomScriptCode, timestamp = os.time() })
    end
end)

-- Pre-load MAP detection on startup
task.spawn(function()
    pcall(function()
        wait(5)  -- Wait for game to load
        ensureMapLoaded()
    end)
end)

setupEnhancedDeathProtection()  -- Use enhanced death protection
setupCleanup()

-- HEARTBEAT LOOP - NEVER STOPS
task.spawn(function()
    while true do
        pcall(sendBulletproofHeartbeat)
        wait(25)
    end
end)

-- COMMAND LISTENER LOOP - NEVER STOPS  
task.spawn(function()
    while true do
        pcall(checkForCommands)
        wait(3)
    end
end)

-- COMMAND PROCESSOR LOOP - NEVER STOPS
task.spawn(function()
    while true do
        pcall(processCommands)
        wait(1.5)  -- Increased delay for Delta stability
    end
end)

-- PLAYER INFO UPDATER LOOP - NEVER STOPS
task.spawn(function()
    while true do
        pcall(updatePlayerInfo)
        wait(30)
    end
end)

-- ANALYTICS UPDATER LOOP - NEVER STOPS
task.spawn(function()
    while true do
        pcall(updateAnalytics)
        wait(60)
    end
end)

-- DUPLICATE CHECKER LOOP - NEVER STOPS
task.spawn(function()
    while true do
        pcall(checkForDuplicateUsers)
        wait(45)
    end
end)

-- SYSTEM UPDATER LOOP - NEVER STOPS
task.spawn(function()
    while true do
        pcall(function()
            checkAndExecuteScript()
            updateAnalyticsData()
        end)
        wait(30)
    end
end)

-- SERVER PERFORMANCE TRACKING LOOP
task.spawn(function()
    while true do
        pcall(trackServerPerformance)
        wait(30)
    end
end)

-- BLACKLIST CLEANUP LOOP
task.spawn(function()
    while true do
        pcall(cleanupExpiredBlacklists)
        wait(300)  -- Clean up every 5 minutes
    end
end)

-- AUTO-REJOIN SETUP
pcall(setupAutoRejoin)

-- ========== EMERGENCY RECOVERY SYSTEM ==========

-- EMERGENCY RESTART - If any loop dies, this restarts it
local function emergencyRecovery()
    pcall(function()
        local lastRecoveryCheck = tick()
        
        while true do
            local currentTime = tick()
            
            if currentTime - (_GLOBAL_WORKSPACE.lastHeartbeat or 0) > 60 then
                print("üö® EMERGENCY: Heartbeat stopped! Restarting...")
                _GLOBAL_WORKSPACE.lastHeartbeat = currentTime
                pcall(sendBulletproofHeartbeat)
            end
            
            if currentTime - (_GLOBAL_WORKSPACE.lastCommandCheck or 0) > 10 then
                print("üö® EMERGENCY: Command listener stopped! Restarting...")
                _GLOBAL_WORKSPACE.lastCommandCheck = currentTime
                pcall(checkForCommands)
            end
            
            wait(30)
        end
    end)
end

-- Start emergency recovery
task.spawn(emergencyRecovery)

-- FINAL MESSAGE
print("================================================")
print("üéØ Carter's DHC ULTIMATE Controller ACTIVE")
print("üíì Heartbeats: EVERY 25 SECONDS")
print("üì° Commands: LISTENING EVERY 3 SECONDS")  
print("‚ö° Processing: EVERY 1.5 SECONDS (Delta Optimized)")
print("üìä Analytics: EVERY 60 SECONDS")
print("üîç Duplicate Check: EVERY 45 SECONDS")
print("üó∫Ô∏è  MAP Compatibility: ACTIVE")
print("üö® Emergency Recovery: ACTIVE")
print("‚ö´ Black Screen: " .. (_GLOBAL_CONFIG.blackScreenEnabled and "ENABLED" or "DISABLED"))
print("üíÄ Enhanced Death Protection: ACTIVE")
print("üñ§ Server Blacklisting: ACTIVE (1 hour duration)")
print("üéØ Optimal Server Selection: ACTIVE (prefer ‚â§" .. _GLOBAL_CONFIG.maxPlayerThreshold .. " players)")
print("üìà Server Performance Tracking: ACTIVE")
print("================================================")
print("Current Server: " .. game.JobId)
print("Blacklisted Servers: " .. #_GLOBAL_WORKSPACE.serverBlacklist)
print("================================================")

-- ULTIMATE SAFETY NET - This runs even if EVERYTHING else fails
task.spawn(function()
    while true do
        pcall(function()
            local emergencyData = {
                emergency = true,
                timestamp = os.time(),
                survival_mode = "ultimate",
                delta_compatible = true,
                server_blacklist_count = #_GLOBAL_WORKSPACE.serverBlacklist,
                current_server = game.JobId
            }
            
            local success, jsonData = pcall(function()
                return game:GetService("HttpService"):JSONEncode(emergencyData)
            end)
            
            if success then
                pcall(function()
                    game:HttpGet("https://omebgle-default-rtdb.firebaseio.com/emergency.json?print=pretty&data=" .. jsonData, true)
                end)
            end
            
            print("üõ°Ô∏è  Ultimate safety net active")
        end)
        wait(120)
    end
end)
