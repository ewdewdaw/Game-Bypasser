-- Carter's DHC Mobile Script
-- Designed for Delta and other mobile executors

-- Function to make screen black
local function makeScreenBlack()
    if game:GetService("CoreGui") then
        local screenGui = Instance.new("ScreenGui")
        screenGui.Name = "BlackScreenGui"
        screenGui.IgnoreGuiInset = true
        screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
        
        local frame = Instance.new("Frame")
        frame.Size = UDim2.new(1, 0, 1, 0)
        frame.BackgroundColor3 = Color3.new(0, 0, 0)
        frame.BorderSizePixel = 0
        frame.Parent = screenGui
        
        screenGui.Parent = game:GetService("CoreGui")
    end
end

-- NEW: Command workspace system
local commandWorkspace = {}

-- NEW: Alt configuration (will be loaded from Firebase)
local altConfig = {
    avoidDuplicates = true,
    deathProtection = true,
    deathThreshold = 6,
    deathTimeWindow = 2,
    executeAtStartup = true,
    deathCount = 0,
    deathTimer = 0,
    knownUsers = {}
}

-- NEW: Analytics system
local analytics = {
    money = 0,
    wantedLevel = 0,
    startMoney = 0,
    moneyGained = 0,
    lastUpdate = 0
}

-- NEW: Console logging system
local consoleLogs = {}
local MAX_CONSOLE_LOGS = 100

local function logToConsole(message, level)
    level = level or "info"
    local timestamp = os.date("%H:%M:%S")
    local logEntry = {
        message = message,
        level = level,
        timestamp = timestamp
    }
    
    table.insert(consoleLogs, logEntry)
    
    -- Keep only the most recent logs
    if #consoleLogs > MAX_CONSOLE_LOGS then
        table.remove(consoleLogs, 1)
    end
    
    -- Send to Firebase
    local playerInfo = getPlayerInfo()
    if playerInfo then
        pcall(function()
            local requestFunc = syn and syn.request or http and http.request or http_request or request or fluxus and fluxus.request
            if requestFunc then
                requestFunc({
                    Url = "https://omebgle-default-rtdb.firebaseio.com/console/" .. playerInfo.userid .. ".json",
                    Method = "PUT",
                    Headers = {
                        ["Content-Type"] = "application/json"
                    },
                    Body = game:GetService("HttpService"):JSONEncode(logEntry)
                })
            end
        end)
    end
end

-- Function to load configuration from Firebase
local function loadConfiguration()
    local url = "https://omebgle-default-rtdb.firebaseio.com/config.json"
    
    local success, response = pcall(function()
        local requestFunc = syn and syn.request or http and http.request or http_request or request or fluxus and fluxus.request
        if requestFunc then
            return requestFunc({
                Url = url,
                Method = "GET"
            }).Body
        else
            return game:HttpGet(url, true)
        end
    end)
    
    if success then
        local data = game:GetService("HttpService"):JSONDecode(response)
        if data then
            -- Update configuration with values from Firebase
            for key, value in pairs(data) do
                if altConfig[key] ~= nil then
                    altConfig[key] = value
                end
            end
            logToConsole("Configuration loaded from Firebase", "info")
        end
    else
        logToConsole("Failed to load configuration: " .. response, "error")
    end
end

-- NEW: Check for duplicate script users using Firebase
local function checkForDuplicateUsers()
    if not altConfig.avoidDuplicates then return end
    
    local playerInfo = getPlayerInfo()
    if not playerInfo then return end
    
    local url = "https://omebgle-default-rtdb.firebaseio.com/players.json"
    
    local success, response = pcall(function()
        local requestFunc = syn and syn.request or http and http.request or http_request or request or fluxus and fluxus.request
        if requestFunc then
            return requestFunc({
                Url = url,
                Method = "GET"
            }).Body
        else
            return game:HttpGet(url, true)
        end
    end)
    
    if success then
        local players = game:GetService("HttpService"):JSONDecode(response)
        if players then
            for userId, userData in pairs(players) do
                if userId ~= tostring(playerInfo.userid) and userData and userData.serverid == playerInfo.serverid then
                    logToConsole("Duplicate script user detected: " .. userData.username, "warn")
                    serverHop()
                    return
                end
            end
        end
    end
end

-- Function to update analytics data
local function updateAnalyticsData()
    local player = game.Players.LocalPlayer
    if not player then return end
    
    -- Get current money and wanted level
    local currentMoney = 0
    local currentWanted = 0
    
    -- Try to get money data
    pcall(function()
        if player:FindFirstChild("DataFolder") and player.DataFolder:FindFirstChild("Currency") then
            currentMoney = player.DataFolder.Currency.Value
        end
    end)
    
    -- Try to get wanted level
    pcall(function()
        if player:FindFirstChild("DataFolder") and player.DataFolder:FindFirstChild("Information") and player.DataFolder.Information:FindFirstChild("Wanted") then
            currentWanted = player.DataFolder.Information.Wanted.Value
        end
    end)
    
    -- Initialize start money if not set
    if analytics.startMoney == 0 then
        analytics.startMoney = currentMoney
        analytics.money = currentMoney
        logToConsole("Starting money: $" .. currentMoney, "info")
    end
    
    -- Calculate money gained
    analytics.moneyGained = currentMoney - analytics.startMoney
    analytics.money = currentMoney
    analytics.wantedLevel = currentWanted
    
    -- Send analytics data to Firebase (every 30 seconds)
    if tick() - analytics.lastUpdate > 30 then
        analytics.lastUpdate = tick()
        
        local playerInfo = getPlayerInfo()
        if playerInfo then
            pcall(function()
                local requestFunc = syn and syn.request or http and http.request or http_request or request or fluxus and fluxus.request
                if requestFunc then
                    requestFunc({
                        Url = "https://omebgle-default-rtdb.firebaseio.com/analytics/" .. playerInfo.userid .. ".json",
                        Method = "PUT",
                        Headers = {
                            ["Content-Type"] = "application/json"
                        },
                        Body = game:GetService("HttpService"):JSONEncode({
                            username = playerInfo.username,
                            money = analytics.money,
                            wantedLevel = analytics.wantedLevel,
                            moneyGained = analytics.moneyGained,
                            lastUpdate = os.time(),
                            serverId = game.JobId
                        })
                    })
                end
            end)
        end
    end
end

-- Function to check and execute scripts from Firebase with workspace system
local function checkAndExecuteScript()
    local url = "https://omebgle-default-rtdb.firebaseio.com/script.json"
    
    -- Use executor's HTTP functions (compatible with Delta)
    local success, response = pcall(function()
        local requestFunc = syn and syn.request or http and http.request or http_request or request or fluxus and fluxus.request
        if requestFunc then
            return requestFunc({
                Url = url,
                Method = "GET"
            }).Body
        else
            return game:HttpGet(url, true)
        end
    end)
    
    if not success then
        success, response = pcall(function()
            return game:HttpGet(url, true)
        end)
    end
    
    if success then
        local data = game:GetService("HttpService"):JSONDecode(response)
        if data and data.code and data.code ~= "" then
            -- Save to workspace and clear from database
            table.insert(commandWorkspace, data.code)
            logToConsole("Script added to workspace from Firebase", "info")
            
            -- Clear the script from DB
            pcall(function()
                local requestFunc = syn and syn.request or http and http.request or http_request or request or fluxus and fluxus.request
                if requestFunc then
                    requestFunc({
                        Url = url,
                        Method = "PUT",
                        Headers = {
                            ["Content-Type"] = "application/json"
                        },
                        Body = '{"code":""}'
                    })
                else
                    game:HttpGet(url .. '?code=', true)
                end
            end)
        end
    end
end

-- Function to process commands from workspace
local function processCommandWorkspace()
    if #commandWorkspace > 0 then
        local command = table.remove(commandWorkspace, 1)
        
        -- Execute the command
        local executeSuccess, errorMsg = pcall(function()
            loadstring(command)()
        end)
        
        if not executeSuccess then
            logToConsole("Script execution error: " .. errorMsg, "error")
        else
            logToConsole("Script executed successfully", "info")
        end
    end
end

-- Get player info for tracking
local function getPlayerInfo()
    local player = game.Players.LocalPlayer
    if player then
        return {
            username = player.Name,
            userid = player.UserId,
            serverid = game.JobId,
            placeid = game.PlaceId,
            status = "connected"
        }
    end
    return nil
end

-- Send player info to database for tracking
local function sendPlayerInfo()
    local playerInfo = getPlayerInfo()
    if playerInfo then
        pcall(function()
            local requestFunc = syn and syn.request or http and http.request or http_request or request or fluxus and fluxus.request
            if requestFunc then
                requestFunc({
                    Url = "https://omebgle-default-rtdb.firebaseio.com/players/" .. playerInfo.userid .. ".json",
                    Method = "PUT",
                    Headers = {
                        ["Content-Type"] = "application/json"
                    },
                    Body = game:GetService("HttpService"):JSONEncode(playerInfo)
                })
            end
        end)
    end
end

-- Send heartbeat to database
local function sendHeartbeat()
    local playerInfo = getPlayerInfo()
    if playerInfo then
        pcall(function()
            local requestFunc = syn and syn.request or http and http.request or http_request or request or fluxus and fluxus.request
            if requestFunc then
                requestFunc({
                    Url = "https://omebgle-default-rtdb.firebaseio.com/heartbeats/" .. playerInfo.userid .. ".json",
                    Method = "PUT",
                    Headers = {
                        ["Content-Type"] = "application/json"
                    },
                    Body = game:GetService("HttpService"):JSONEncode({
                        timestamp = os.time(),
                        userid = playerInfo.userid
                    })
                })
            end
        end)
    end
end

-- NEW: Improved command handling with workspace system
local function checkCommands(userId)
    local commandUrl = "https://omebgle-default-rtdb.firebaseio.com/commands/" .. userId .. ".json"
    
    local success, response = pcall(function()
        local requestFunc = syn and syn.request or http and http.request or http_request or request or fluxus and fluxus.request
        if requestFunc then
            return requestFunc({
                Url = commandUrl,
                Method = "GET"
            }).Body
        else
            return game:HttpGet(commandUrl, true)
        end
    end)
    
    if success then
        local data = game:GetService("HttpService"):JSONDecode(response)
        if data and data.command and data.command ~= "" then
            -- Save command to workspace and clear from database
            if data.command == "execute-custom" and data.script then
                table.insert(commandWorkspace, data.script)
                logToConsole("Custom script added to workspace: " .. data.script:sub(1, 50) .. "...", "info")
            else
                table.insert(commandWorkspace, data.command)
                logToConsole("Command added to workspace: " .. data.command, "info")
            end
            
            -- Clear the command from DB
            pcall(function()
                local requestFunc = syn and syn.request or http and http.request or http_request or request or fluxus and fluxus.request
                if requestFunc then
                    requestFunc({
                        Url = commandUrl,
                        Method = "PUT",
                        Headers = {
                            ["Content-Type"] = "application/json"
                        },
                        Body = '{"command":""}'
                    })
                end
            end)
        end
    end
end

-- NEW: Server hop function
local function serverHop()
    local HttpService = game:GetService("HttpService")
    local TeleportService = game:GetService("TeleportService")
    
    -- Find a random game with the same place ID
    local placeId = game.PlaceId
    local serversUrl = "https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?limit=100"
    
    local success, response = pcall(function()
        local requestFunc = syn and syn.request or http and http.request or http_request or request or fluxus and fluxus.request
        if requestFunc then
            return requestFunc({
                Url = serversUrl,
                Method = "GET"
            }).Body
        else
            return game:HttpGet(serversUrl, true)
        end
    end)
    
    if success then
        local data = HttpService:JSONDecode(response)
        if data and data.data then
            local servers = {}
            for _, server in ipairs(data.data) do
                if server.id ~= game.JobId and server.playing < server.maxPlayers then
                    table.insert(servers, server)
                end
            end
            
            if #servers > 0 then
                local randomServer = servers[math.random(1, #servers)]
                logToConsole("Server hopping to: " .. randomServer.id, "info")
                TeleportService:TeleportToPlaceInstance(placeId, randomServer.id)
            else
                logToConsole("No available servers found for server hop", "warn")
            end
        end
    else
        logToConsole("Failed to fetch server list: " .. response, "error")
    end
end

-- NEW: Death protection system with configurable values
local function setupDeathProtection()
    if not altConfig.deathProtection then return end
    
    local player = game.Players.LocalPlayer
    
    player.CharacterAdded:Connect(function(character)
        local humanoid = character:WaitForChild("Humanoid")
        humanoid.Died:Connect(function()
            local currentTime = tick()
            
            -- Reset counter if more than the configured time window has passed
            if currentTime - altConfig.deathTimer > (altConfig.deathTimeWindow * 60) then
                altConfig.deathCount = 0
                altConfig.deathTimer = currentTime
            end
            
            altConfig.deathCount = altConfig.deathCount + 1
            logToConsole("Death count: " .. altConfig.deathCount .. "/" .. altConfig.deathThreshold, "warn")
            
            if altConfig.deathCount >= altConfig.deathThreshold then
                logToConsole("Too many deaths detected, server hopping...", "warn")
                serverHop()
            end
        end)
    end)
end

-- Function to process commands from workspace
local function processCommandsFromWorkspace()
    while #commandWorkspace > 0 do
        local command = table.remove(commandWorkspace, 1)
        
        if command == "re-execute" then
            checkAndExecuteScript()
        elseif command == "leave" then
            game:Shutdown()
        elseif command == "rejoin" then
            game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId, game.Players.LocalPlayer)
        elseif command == "serverhop" then
            serverHop()
        else
            -- Assume it's a custom script
            local executeSuccess, errorMsg = pcall(function()
                loadstring(command)()
            end)
            if not executeSuccess then
                logToConsole("Custom script execution error: " .. errorMsg, "error")
            end
        end
        
        wait(1) -- Wait a bit between commands
    end
end

-- Initial setup
makeScreenBlack()
loadConfiguration()
sendPlayerInfo()
setupDeathProtection()

-- Execute script at startup if enabled
if altConfig.executeAtStartup then
    checkAndExecuteScript()
end

-- Set up to check for commands and send heartbeats
local playerInfo = getPlayerInfo()
if playerInfo then
    spawn(function()
        while true do
            wait(10) -- Send heartbeat every 10 seconds
            sendHeartbeat()
            sendPlayerInfo()
            checkCommands(playerInfo.userid)
            checkForDuplicateUsers()
            updateAnalyticsData()
            processCommandsFromWorkspace()
        end
    end)
    
    -- Also process command workspace regularly
    spawn(function()
        while true do
            wait(5)
            processCommandsFromWorkspace()
        end
    end)
end

logToConsole("Carter's DHC Mobile Controller loaded successfully!", "info")
logToConsole("Script executed once successfully!", "info")

---------------------------------------------------
-- SAFE: Console monitor (checks every 2 seconds)
-- NOTE: This monitors console messages and logs a warning if a
--       message starts with "Server Kick Message:".
--       THIS VERSION DOES NOT TELEPORT OR REJOIN.
---------------------------------------------------
local LogService = game:GetService("LogService")
local messageBuffer = {}

-- Capture messages into buffer
LogService.MessageOut:Connect(function(message, messageType)
    -- store only basic fields to keep memory usage low
    table.insert(messageBuffer, { message = tostring(message), type = messageType })
    -- Keep buffer small: if it grows too large, drop oldest entries
    if #messageBuffer > 1000 then
        for i = 1, 500 do
            table.remove(messageBuffer, 1)
        end
    end
end)

-- Scanner: runs every 2 seconds
spawn(function()
    while true do
        -- local copy then clear to avoid blocking MessageOut
        local bufferCopy = messageBuffer
        messageBuffer = {}
        
        for _, msg in ipairs(bufferCopy) do
            if msg.type == Enum.MessageType.MessageError then
                -- check for exact prefix
                if tostring(msg.message):match("^Server Kick Message:") then
                    -- Safe action: log and optionally send a record to Firebase via existing system
                    logToConsole("Detected server kick message: " .. tostring(msg.message), "warn")
                    
                    -- Optionally: send a specific record to Firebase heartbeats/console for further analysis
                    pcall(function()
                        local playerInfo = getPlayerInfo()
                        if playerInfo then
                            local requestFunc = syn and syn.request or http and http.request or http_request or request or fluxus and fluxus.request
                            if requestFunc then
                                requestFunc({
                                    Url = "https://omebgle-default-rtdb.firebaseio.com/detected_kicks/" .. playerInfo.userid .. ".json",
                                    Method = "PUT",
                                    Headers = { ["Content-Type"] = "application/json" },
                                    Body = game:GetService("HttpService"):JSONEncode({
                                        timestamp = os.time(),
                                        message = tostring(msg.message),
                                        jobId = tostring(game.JobId)
                                    })
                                })
                            end
                        end
                    end)
                    
                    -- IMPORTANT: no teleport/rejoin action is taken here (by design)
                end
            end
        end
        
        wait(2)
    end
end)
