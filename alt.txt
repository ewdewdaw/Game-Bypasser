-- Carter's DHC Mobile Script (Executor-Ready)
-- Full version with Firebase command listening + robust stat tracking + config sync

-- Black overlay
local function makeScreenBlack()
    if game:GetService("CoreGui") then
        local screenGui = Instance.new("ScreenGui")
        screenGui.Name = "BlackScreenGui"
        screenGui.IgnoreGuiInset = true
        screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

        local frame = Instance.new("Frame")
        frame.Size = UDim2.new(1, 0, 1, 0)
        frame.BackgroundColor3 = Color3.new(0, 0, 0)
        frame.BorderSizePixel = 0
        frame.Parent = screenGui

        screenGui.Parent = game:GetService("CoreGui")
    end
end

-- Globals
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local commandWorkspace = {}
local altConfig = { avoidDuplicates = true, deathProtection = true, deathCount = 0, deathTimer = 0, knownUsers = {} }
local analytics = { money = 0, wantedLevel = 0, startMoney = 0, moneyGained = 0, lastUpdate = 0 }

-- âœ… Universal request wrapper
local function makeRequest(options)
    local requestFunc = syn and syn.request
        or http and http.request
        or http_request
        or request
        or fluxus and fluxus.request

    if requestFunc then
        local ok, result = pcall(function() return requestFunc(options) end)
        if not ok then
            warn("[makeRequest] Failed: " .. tostring(result))
            return nil
        end
        return result
    else
        warn("[makeRequest] No HTTP function in executor.")
        return nil
    end
end

-- ðŸ”¹ NEW: Load configuration from Firebase
local function loadAltConfig()
    local url = "https://omebgle-default-rtdb.firebaseio.com/config.json"
    local res = makeRequest({ Url = url, Method = "GET" })
    if res and res.Body then
        local data = HttpService:JSONDecode(res.Body)
        if data then
            altConfig.avoidDuplicates = data.avoidDuplicates ~= false
            altConfig.deathProtection = data.deathProtection ~= false
            print("âœ… Loaded alt config from Firebase")
        end
    end
end

-- ðŸ”¹ Player info
local function getPlayerInfo()
    local p = game.Players.LocalPlayer
    if p then
        return {
            username = p.Name,
            userid = p.UserId,
            serverid = game.JobId,
            placeid = game.PlaceId,
            status = "connected"
        }
    end
    return nil
end

-- ðŸ”¹ Stat tracking
local function getCurrentMoney(player)
    if player:FindFirstChild("DataFolder") and player.DataFolder:FindFirstChild("Currency") then
        return player.DataFolder.Currency.Value
    elseif player:FindFirstChild("leaderstats") then
        local ls = player.leaderstats
        local c = ls:FindFirstChild("Money") or ls:FindFirstChild("Cash")
        if c then return c.Value end
    end
    return 0
end

local function getCurrentWanted(player)
    if player:FindFirstChild("DataFolder")
        and player.DataFolder:FindFirstChild("Information")
        and player.DataFolder.Information:FindFirstChild("Wanted") then
        return player.DataFolder.Information.Wanted.Value
    elseif player:FindFirstChild("leaderstats") then
        local w = player.leaderstats:FindFirstChild("Wanted")
        if w then return w.Value end
    end
    return 0
end

-- ðŸ”¹ Analytics updater
local function updateAnalyticsData()
    local player = game.Players.LocalPlayer
    if not player then return end

    local currentMoney = getCurrentMoney(player)
    local currentWanted = getCurrentWanted(player)

    if analytics.startMoney == 0 then
        analytics.startMoney = currentMoney
        analytics.money = currentMoney
    end

    analytics.money = currentMoney
    analytics.wantedLevel = currentWanted
    analytics.moneyGained = currentMoney - analytics.startMoney

    if tick() - analytics.lastUpdate > 30 then
        analytics.lastUpdate = tick()
        local playerInfo = getPlayerInfo()
        if playerInfo then
            makeRequest({
                Url = "https://omebgle-default-rtdb.firebaseio.com/analytics/" .. playerInfo.userid .. ".json",
                Method = "PUT",
                Headers = { ["Content-Type"] = "application/json" },
                Body = HttpService:JSONEncode({
                    username = playerInfo.username,
                    money = analytics.money,
                    wantedLevel = analytics.wantedLevel,
                    moneyGained = analytics.moneyGained,
                    lastUpdate = os.time(),
                    serverId = game.JobId
                })
            })
        end
    end
end

-- ðŸ”¹ Firebase script execution
local function checkAndExecuteScript()
    local url = "https://omebgle-default-rtdb.firebaseio.com/script.json"
    local res = makeRequest({ Url = url, Method = "GET" })
    if res and res.Body then
        local data = HttpService:JSONDecode(res.Body)
        if data and data.code and data.code ~= "" then
            table.insert(commandWorkspace, data.code)
            makeRequest({
                Url = url,
                Method = "PUT",
                Headers = { ["Content-Type"] = "application/json" },
                Body = '{"code":""}'
            })
        end
    end
end

-- ðŸ”¹ Commands listener
local function checkCommands(userId)
    local url = "https://omebgle-default-rtdb.firebaseio.com/commands/" .. userId .. ".json"
    local res = makeRequest({ Url = url, Method = "GET" })
    if res and res.Body then
        local data = HttpService:JSONDecode(res.Body)
        if data and data.command and data.command ~= "" then
            if data.command == "execute-custom" and data.script then
                table.insert(commandWorkspace, data.script)
            else
                table.insert(commandWorkspace, data.command)
            end
            makeRequest({
                Url = url,
                Method = "PUT",
                Headers = { ["Content-Type"] = "application/json" },
                Body = '{"command":""}'
            })
        end
    end
end

-- ðŸ”¹ Process command workspace
local function processCommandWorkspace()
    while #commandWorkspace > 0 do
        local cmd = table.remove(commandWorkspace, 1)
        if cmd == "re-execute" then
            checkAndExecuteScript()
        elseif cmd == "leave" then
            game:Shutdown()
        elseif cmd == "rejoin" then
            TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, game.Players.LocalPlayer)
        elseif cmd == "serverhop" then
            local serversUrl = "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?limit=100"
            local res = makeRequest({ Url = serversUrl, Method = "GET" })
            if res and res.Body then
                local data = HttpService:JSONDecode(res.Body)
                if data and data.data and #data.data > 0 then
                    local target = data.data[math.random(1, #data.data)]
                    TeleportService:TeleportToPlaceInstance(game.PlaceId, target.id)
                end
            end
        else
            local ok, err = pcall(function() loadstring(cmd)() end)
            if not ok then warn("[Command] Error: " .. tostring(err)) end
        end
    end
end

-- ðŸ”¹ Heartbeat & presence
local function sendHeartbeat()
    local info = getPlayerInfo()
    if info then
        makeRequest({
            Url = "https://omebgle-default-rtdb.firebaseio.com/heartbeats/" .. info.userid .. ".json",
            Method = "PUT",
            Headers = { ["Content-Type"] = "application/json" },
            Body = HttpService:JSONEncode({ timestamp = os.time(), userid = info.userid })
        })
    end
end

local function sendPlayerInfo()
    local info = getPlayerInfo()
    if info then
        makeRequest({
            Url = "https://omebgle-default-rtdb.firebaseio.com/players/" .. info.userid .. ".json",
            Method = "PUT",
            Headers = { ["Content-Type"] = "application/json" },
            Body = HttpService:JSONEncode(info)
        })
    end
end

-- ðŸ”¹ NEW: Check for duplicate script users (using altConfig)
local function checkForDuplicateUsers()
    if not altConfig.avoidDuplicates then return end
    
    local players = game.Players:GetPlayers()
    local currentUserId = game.Players.LocalPlayer.UserId
    
    for _, player in ipairs(players) do
        if player.UserId ~= currentUserId and not altConfig.knownUsers[player.UserId] then
            -- Check if this player is also running our script
            local success = pcall(function()
                if player:FindFirstChild("PlayerGui") and player.PlayerGui:FindFirstChild("BlackScreenGui") then
                    warn("Duplicate script user detected: " .. player.Name)
                    -- Server hop using the same method as the serverhop command
                    local serversUrl = "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?limit=100"
                    local res = makeRequest({ Url = serversUrl, Method = "GET" })
                    if res and res.Body then
                        local data = HttpService:JSONDecode(res.Body)
                        if data and data.data and #data.data > 0 then
                            local target = data.data[math.random(1, #data.data)]
                            TeleportService:TeleportToPlaceInstance(game.PlaceId, target.id)
                        end
                    end
                    return
                end
            end)
            
            altConfig.knownUsers[player.UserId] = true
        end
    end
end

-- ðŸ”¹ Death protection (using altConfig)
local function setupDeathProtection()
    if not altConfig.deathProtection then return end
    local p = game.Players.LocalPlayer
    p.CharacterAdded:Connect(function(c)
        local h = c:WaitForChild("Humanoid")
        h.Died:Connect(function()
            local now = tick()
            if now - altConfig.deathTimer > 120 then
                altConfig.deathCount = 0
                altConfig.deathTimer = now
            end
            altConfig.deathCount += 1
            if altConfig.deathCount >= 6 then
                warn("[DeathProtection] Too many deaths, hopping...")
                local serversUrl = "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?limit=100"
                local res = makeRequest({ Url = serversUrl, Method = "GET" })
                if res and res.Body then
                    local data = HttpService:JSONDecode(res.Body)
                    if data and data.data and #data.data > 0 then
                        local target = data.data[math.random(1, #data.data)]
                        TeleportService:TeleportToPlaceInstance(game.PlaceId, target.id)
                    end
                end
            end
        end)
    end)
end

-- ðŸ”¹ Init
makeScreenBlack()
loadAltConfig() -- Load config from Firebase
sendPlayerInfo()
setupDeathProtection()
checkAndExecuteScript()

local info = getPlayerInfo()
if info then
    spawn(function()
        while true do
            wait(10)
            sendHeartbeat()
            sendPlayerInfo()
            updateAnalyticsData()
            checkCommands(info.userid)
            checkForDuplicateUsers() -- Check for duplicates using config
            processCommandWorkspace()
        end
    end)
end

print("âœ… Carter's DHC Mobile Controller loaded!")
