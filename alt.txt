getgenv()._ = "Join discord.gg/msgabv2t9Q | discord.gg/stando to get latest update ok bai >.+ | If you pay for this script you get scammed, this script is completely free ok"

-- SETTINGS FILES
local OwnerFileName = "OwnerConfig.txt"
local PositionFileName = "PositionConfig.txt"
local ModeFileName = "ModeConfig.txt"
local AutoExecFile = "AutoExec.txt"
local AutoExecEnabledFile = "AutoExecEnabled.txt"
local ModeToggleFile = "ModeToggle.txt"
local WebhookFile = "WebhookConfig.txt"
local MessageWaitFile = "MessageWaitConfig.txt"
local ServerHopTimeFile = "ServerHopTimeFile.txt"

local function loadSetting(fileName, default)
    if isfile and isfile(fileName) then return readfile(fileName) end
    return default
end
local function saveSetting(fileName, value)
    if writefile then
        writefile(fileName, value)
    end
end

getgenv().Owner = loadSetting(OwnerFileName, "Hellofriendme19")
getgenv().Position = loadSetting(PositionFileName, "Back")
local autoExecTimer = tonumber(loadSetting(AutoExecFile, "10")) or 10
local autoExecEnabled = (loadSetting(AutoExecEnabledFile, "true") == "true")
local showModeSelectorToggle = (loadSetting(ModeToggleFile, "true") == "true")
local lastMode = loadSetting(ModeFileName, "Stand")
local webhookUrl = loadSetting(WebhookFile, "")
local messageWait = tonumber(loadSetting(MessageWaitFile, "5")) or 5
local serverHopTime = tonumber(loadSetting(ServerHopTimeFile, "30")) or 30
local autoExecTask = nil

-- Initialize AutofarmSettings if it doesn't exist
if not getgenv().AutofarmSettings then
    getgenv().AutofarmSettings = {
        Webhook = webhookUrl,
        MessageWait = messageWait,
        Serverhop = {
            Time = serverHopTime
        }
    }
end

-- Death counter for anti-death feature
local deathCount = 0
local deathTimer = 0
local antiDeathEnabled = true
local maxDeaths = 6
local deathTimeWindow = 180 -- 3 minutes in seconds

-- Track current mode for anti-death feature
local currentMode = "Stand"

-- Track if server monitoring is active
local serverMonitoringActive = false
local serverMonitoringTask = nil

-- Universal HTTP request function for all executor environments
local function httpRequest(options)
    -- Try different request methods for different executors
    local requestFuncs = {
        function() 
            if syn and syn.request then 
                return syn.request(options) 
            end
        end,
        function() 
            if request then 
                return request(options) 
            end
        end,
        function()
            if http and http.request then
                return http.request(options)
            end
        end,
        function()
            -- Mobile executor fallback (some use this)
            if _G and _G.request then
                return _G.request(options)
            end
        end
    }
    
    for _, func in ipairs(requestFuncs) do
        local success, result = pcall(func)
        if success and result then
            return result
        end
    end
    
    return nil
end

-- Firebase functions for all executor environments
local function saveUserServerToFirebase()
    local userId = tostring(game.Players.LocalPlayer.UserId)
    local serverId = game.JobId
    local url = "https://omebgle-default-rtdb.firebaseio.com/scriptUsers/" .. userId .. ".json"
    
    local userData = {
        userId = userId,
        serverId = serverId,
        lastUpdate = os.time()
    }
    
    local jsonData = game:GetService("HttpService"):JSONEncode(userData)
    
    -- Use universal http request function
    local response = httpRequest({
        Url = url,
        Method = "PUT",
        Headers = {
            ["Content-Type"] = "application/json"
        },
        Body = jsonData
    })
    
    if response and response.Success then
        print("User ID and Server ID saved to database")
    else
        warn("Failed to save user data to database")
    end
end

local function getAllScriptUsers()
    local url = "https://omebgle-default-rtdb.firebaseio.com/scriptUsers.json"
    
    -- Use universal http request function
    local response = httpRequest({
        Url = url,
        Method = "GET"
    })
    
    if response and response.Success and response.Body ~= "null" then
        local success, data = pcall(function()
            return game:GetService("HttpService"):JSONDecode(response.Body)
        end)
        
        if success and data then
            local scriptUsers = {}
            local currentTime = os.time()
            
            for userId, userData in pairs(data) do
                -- Clean up the data (Firebase might return with some extra structure)
                local cleanData = {}
                if type(userData) == "table" then
                    cleanData.userId = userData.userId or userId
                    cleanData.serverId = userData.serverId
                    cleanData.lastUpdate = userData.lastUpdate or 0
                    
                    -- Only include recent entries (within last 3 minutes)
                    if currentTime - cleanData.lastUpdate < 180 then
                        table.insert(scriptUsers, cleanData)
                    end
                    -- Note: We don't delete from Firebase on client side in executor environment
                end
            end
            
            return scriptUsers
        end
    end
    
    return {} -- Return empty table if no data
end

-- NEW: Function to check if users are actually in the game
local function isUserInGame(userId)
    local userIdNum = tonumber(userId)
    if not userIdNum then return false end
    
    for _, player in ipairs(game.Players:GetPlayers()) do
        if player.UserId == userIdNum then
            return true
        end
    end
    
    return false
end

-- NEW: Function to check if multiple script users are in the same server
local function checkForMultipleScriptUsersInSameServer()
    local currentUserId = game.Players.LocalPlayer.UserId
    local currentServerId = game.JobId
    local scriptUsers = getAllScriptUsers()
    
    local usersInSameServer = {}
    
    -- Check which script users are in the same server AND are actually in the game
    for _, userData in ipairs(scriptUsers) do
        if userData.serverId == currentServerId and 
           userData.userId ~= tostring(currentUserId) and
           isUserInGame(userData.userId) then
            table.insert(usersInSameServer, userData.userId)
        end
    end
    
    -- If there are other script users in the same server
    if #usersInSameServer > 0 then
        print("Found " .. #usersInSameServer .. " other script user(s) in this server")
        
        -- NEW: Check if we're in a testing scenario with our own alt account
        -- Get all players in the game and check if any are our alt accounts
        local isTestingWithAlt = false
        local myUsername = game.Players.LocalPlayer.Name
        
        for _, player in ipairs(game.Players:GetPlayers()) do
            -- If we recognize this as our alt account (you can customize this check)
            if player.UserId ~= currentUserId and 
               (player.Name:find("alt", 1, true) or player.Name:find("test", 1, true)) then
                isTestingWithAlt = true
                break
            end
        end
        
        -- If we're testing with our alt, don't server hop
        if isTestingWithAlt then
            print("Testing with alt account detected - not server hopping")
            return false
        end
        
        -- For non-testing scenarios, use a random selection instead of user ID sorting
        -- This ensures fairness instead of always making the same account hop
        math.randomseed(os.time())
        if math.random() < 0.5 then  -- 50% chance to hop
            print("This account will server hop (random selection)")
            return true
        else
            print("Another account will server hop")
            return false
        end
    end
    
    return false
end

-- NEW: Server hop function with player count filtering
local function serverHop()
    -- Simple server hop implementation
    local TeleportService = game:GetService("TeleportService")
    
    -- Try to find a different server with fewer players
    local success, servers = pcall(function()
        local response = httpRequest({
            Url = "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100",
            Method = "GET"
        })
        
        if response and response.Success then
            return game:GetService("HttpService"):JSONDecode(response.Body)
        end
        return nil
    end)
    
    if success and servers and servers.data then
        local availableServers = {}
        local currentPlayers = #game.Players:GetPlayers()
        
        for _, server in ipairs(servers.data) do
            if server.id ~= game.JobId and server.playing < server.maxPlayers then
                -- Prefer servers with fewer players than current server
                if server.playing < currentPlayers then
                    table.insert(availableServers, server.id)
                end
            end
        end
        
        -- If no servers with fewer players found, use any available server
        if #availableServers == 0 then
            for _, server in ipairs(servers.data) do
                if server.id ~= game.JobId and server.playing < server.maxPlayers then
                    table.insert(availableServers, server.id)
                end
            end
        end
        
        if #availableServers > 0 then
            local randomServer = availableServers[math.random(1, #availableServers)]
            TeleportService:TeleportToPlaceInstance(game.PlaceId, randomServer)
            return
        end
    end
    
    -- Fallback: teleport to a new server
    TeleportService:Teleport(game.PlaceId)
end

-- Anti-death feature: Server hop if player dies too many times (ONLY IN CASH MODE)
local function setupAntiDeathFeature()
    local player = game.Players.LocalPlayer
    local lastDeathTime = 0
    
    player.CharacterAdded:Connect(function(character)
        local humanoid = character:WaitForChild("Humanoid")
        humanoid.Died:Connect(function()
            -- Only activate anti-death feature in Cash mode
            if currentMode ~= "Cash" then
                return
            end
            
            local currentTime = os.time()
            
            -- Reset counter if it's been more than deathTimeWindow since last death
            if currentTime - deathTimer > deathTimeWindow then
                deathCount = 0
                deathTimer = currentTime
            end
            
            deathCount = deathCount + 1
            print("Death count: " .. deathCount .. "/" .. maxDeaths .. " in " .. deathTimeWindow .. " seconds")
            
            -- Server hop if death limit reached
            if deathCount >= maxDeaths and antiDeathEnabled then
                print("Too many deaths (" .. deathCount .. "), server hopping...")
                deathCount = 0
                deathTimer = 0
                task.wait(2) -- Short delay before hopping
                serverHop()
            end
        end)
    end)
end

-- Function to start server monitoring (only for Cash mode)
local function startServerMonitoring()
    if serverMonitoringActive then return end
    serverMonitoringActive = true
    
    -- NEW: Check if we're in a testing scenario and disable server hopping if so
    local isTestingWithAlt = false
    local currentUserId = game.Players.LocalPlayer.UserId
    
    for _, player in ipairs(game.Players:GetPlayers()) do
        if player.UserId ~= currentUserId and 
           (player.Name:find("alt", 1, true) or player.Name:find("test", 1, true)) then
            isTestingWithAlt = true
            print("Alt account detected - disabling server hopping for testing")
            break
        end
    end
    
    -- Setup anti-death feature
    setupAntiDeathFeature()
    
    -- Only proceed with server monitoring if we're not testing with an alt
    if not isTestingWithAlt then
        -- Save our data first
        saveUserServerToFirebase()
        
        -- Check if we need to server hop due to multiple script users in same server
        task.wait(5) -- Wait a bit for other players to save their data
        
        if checkForMultipleScriptUsersInSameServer() then
            print("Server hopping to avoid multiple script users in same server...")
            task.wait(2) -- Short delay before hopping
            serverHop()
            return
        end
        
        -- Periodically update our server status (every 2 minutes)
        serverMonitoringTask = task.spawn(function()
            while serverMonitoringActive and task.wait(120) do
                saveUserServerToFirebase()
                
                -- Also check if we need to hop (in case someone joined later)
                if checkForMultipleScriptUsersInSameServer() then
                    print("Server hopping to avoid multiple script users in same server...")
                    task.wait(2)
                    serverHop()
                    break
                end
            end
        end)
    else
        -- Just save our data once but don't monitor for server hopping
        saveUserServerToFirebase()
    end
end

-- Function to stop server monitoring
local function stopServerMonitoring()
    serverMonitoringActive = false
    if serverMonitoringTask then
        task.cancel(serverMonitoringTask)
        serverMonitoringTask = nil
    end
end

-- FIXED: Safe FPS cap setting function - REMOVED AUTOMATIC FPS CAP
local function setFpsCap(value)
    local fpsValue = tonumber(value)
    if fpsValue and fpsValue > 0 then
        if setfpscap then
            setfpscap(fpsValue)
        end
        return true
    end
    return false
end

-- STAND SCRIPT FUNCTION - EXACT FORMAT AS SPECIFIED
local function RunStand()
    currentMode = "Stand"
    stopServerMonitoring() -- Stop server monitoring when not in Cash mode
    
    getgenv()._=
    "Join discord.gg/msgabv2t9Q | discord.gg/stando to get latest update ok bai >.+ | If you pay for this script you get scammed, this script is completely free ok"
    --[[

    To get started in "getgenv().Owner" put the username you want to control.

    !! \\ MAKE SURE THE OWNER AND STAND ACCOUNT ARE IN SAME SERVER // !!

    --// Example \\
    Before --> getgenv().Owner = "OWNER_USERNAME_HERE"
    After  --> getgenv().Owner = "XK5NG"

    ^^ --> This is just the example don't put the username herez]]

    getgenv().Owner = getgenv().Owner

    getgenv().Configuration = {
    ['Fps'] = 20, --Fps cap [if supported]
    ['Msg'] = 'Tuff Tuff Tuff🤑🥀🤬🤬', --When You Say [/e msg] It Makes All The Alts Say That Message
    ['CrewID'] = 7, --Must join group
    ['Attack'] = 'Heavy', --[Heavy | Light] Heavy = Super Punch Light = Spam Punch
    ['TPMode'] = 'Cart', --[Knock | Cart] --Teleport mode
    ['GunMode'] = 'Aug', --[LMG | Rifle | Aug] --Self explain
    ['FlyMode'] = 'Glide', --[Glide | FlyV1 | FlyV2 | Hover | Heaven ]
    ['Position'] = getgenv().Position, --[Back | Left | Right | Mid | UpMid | UpLeft | UpLeft | Walk ]
    ['Resolver'] = false, --[true | false] Turn On Or Off Resolver If Someone Using Anti Lock [This only applied to attack only for guns it's already have resolver]
    ['ChatCmds'] = true, --[true | false] if true stand talks to you
    ['AutoMask'] = true, --[true | false] Auto Buy Mask When The Stand Respawn
    ['MaskMode'] = 'Riot', --[Surgeon | Paintball | Skull | Pumpkin | Hockey | Ninja | Riot | Breathing] The Stand Will Buy The Mask You Selected
    ['AntiStomp'] = true, --[true | false] The Stand Will Cannot Be Stomped Or Grabbed
    ['StandMode'] = 'Star Platinum : OverHeaven', --[Star Platinum : OverHeaven | Star Platinum: The World | Star Platinum, Za Warudo! | TheWorld | Cmoon | King Crimson | Killer Queen | MIH | D4C]
    ['Smoothing'] = false, --[true | false] if true stand will follow you smoothly
    ['AttackMode'] = 'Sky', --[Sky | Under] If [Sky] The Stand Will Attack Infront Of Target And If [Under] The Stand Will Attack In Underground
    ['CustomName'] = 'a barbershop haircut that costs a quarter', --Custom Name Text Default Is [Master] Example Of it 'Im Here, Master'
    ['Hidescreen'] = true, --[true | false] If you set it to true you will see white blank screen [Save up gpu usage]
    ['SummonPoses'] = 'Pose2', --[False | Pose1 | Pose2 | Pose3]
    ['LowGraphics'] = true, --[true | false] Turns graphics down so your stand doesnt lag too much
    ['CustomPrefix'] = '.', --[ ! | / | . | ? | > | < | $ | ; | : ] Custom target prefix
    ['CustomSummon'] = 'Summon!', --Custom [Summon!] Text
    ['AutoPrediction'] = true, --[true | false] Turn On Or Off Auto Prediction 
    ['AttackDistance'] = 15, --Attack distance for "Attack!, Stab!, Gkill!" max distance
    ['AutoSaveLocation'] = 'Downhill_Rooftop', --[Downhill_Rooftop | Uphill_Rooftop | DA_FURNITURE ]
    ['AttackPrediction'] = 0.34, --Prediction For Attack Or Targetting
    ['AttackAutoPrediction'] = 0.23, --Prediction For Attack Or Targetting
    --//    ! Sounds !     \\--
    --\\ MUST HAVE BOOMBOX //--
    ['Sounds'] = true, --[true | false]
    ['CustomSong'] = 123456, --Enter A Song ID And Say 'Song!'
    ['SummonMusic'] = true, --[true | false]
    ['SummonMusicID'] = 'Default' -- Enter a Sound ID Put [Default] If You Would Like The Default Sound
    }loadstring(game:HttpGet("https://xk5ng.github.io/V5.0"))()
end

-- SNIPER SCRIPT FUNCTION - EXACT FORMAT AS SPECIFIED
local function RunSniper()
    currentMode = "Sniper"
    stopServerMonitoring() -- Stop server monitoring when not in Cash mode
    
    getgenv()._=
    "Join discord.gg/msgabv2t9Q | discord.gg/stando to get latest update ok bai | If you pay for this script you get scammed, this script is completely free ok"
    --[[

    To get started in "getgenv().Owner" put the username you want to control the alt.

    !! \\ MAKE SURE THE LocalPlayer AND LocalPlayer ACCOUNT ARE IN SAME SERVER // !!

    --// Example \\
    Before --> getgenv().Owner = "OWNER_USERNAME_HERE"
    After  --> getgenv().Owner = "XK5NG"

    ^^ --> This is just the example don't put the username here]]

    getgenv().Owner = getgenv().Owner

    getgenv().Whitelist = { --Userids of who can control the bot
        1,
        2,
        3,
    }

    getgenv().Configuration = {
        ['Guns'] = {"Aug", "Rifle"}, --Default gun, recomended

        ['Strafe'] = "Random", --Strafe method, Normal - orbit; Random - random;

        ['Void'] = "Unhittable", --Void methods, Unhittable, Rotation, Meta, Lerp, Custom
        ['Lerp'] = 0.001, --Change the lerp speed, required Void method 'Lerp'
        ['CFrame'] = {0, 1, 0}, --Custom void cframe, required Void method 'Custom'; return the cframe value to math.random [exception Y];

        ['Prediction'] = 4, --Prediction, self explainatory
        ['Multiplier'] = 5, --Multiplier, multiplies the prediction value; dont change if you dont know what this does

        ['StompHeight'] = 4.4, --Stomp Y offset, self explainatory; affects stomp Z X offset
        ['RandomStompOffset'] = 1, --Stomp Z X offset, 0 = nil or disable; recomended for alts; '1' value is max for dh

        ['TimeBeforeVoid'] = 1.4, --Seconds before voiding with bring

        ["TimesAmmo"] = 5, --How much ammo will it buy
        ['SpareAmmo'] = 3, --How much ammo til start buying
        ['ForceAmmo'] = 1, --How much ammo to force buying

        ['InstantRespawn'] = false, --Instantly respawn you
        ['Cooldown'] = 120, --Seconds to respawn

        ['DoubleBarrelTime'] = 0.11, --Double-Barrel time to shoot (must have DoubleBarrel to true)

        ['CustomAnimationPlay'] = false, --Autoplay whether on the condition; Custom = Custom. acceptable
        ['CustomAnimation'] = nil, --Your custom animation assetid; must be valid (return on MarketplaceService to check if valid or not), current nil
        ['CustomAnimationSpeed'] = 1, --Playback speed can be anything

        ['AuraRange'] = 25, --Range on how far will be the kill aura

        ['CcrewID'] = 7, --Ccrew id, preferable to be in both same crew alt/main
        ['VoidView'] = true, --Puts urs camera to void, gradually increasing ur fps
        ['AntiStomp'] = true, --Self explainatory
        ['HideScreen'] = true, --Boost fps and lowered cpu consumption, recomended
        ['CustomPrefix'] = "!", --Bot prefix
        ['Fpscap'] = 150 --Capped fps
    }loadstring(game:HttpGet("https://xk5ng.github.io/Sniper-Bot-Rewrite"))()
end

-- MONEY FARM SCRIPT - REMOVED AUTOMATIC FPS CAP
local MoneyFarmScript = function()
    currentMode = "Cash"
    startServerMonitoring() -- Start server monitoring for Cash mode
    
    -- Get blacklisted users from Firebase (for the money farm functionality)
    local blacklistedUsers = {1234567890, 1234567890, 1234567890} -- Default fallback
    
    getgenv().AutofarmSettings = getgenv().AutofarmSettings or {
        ["Webhook"] = webhookUrl,
        ["MessageWait"] = messageWait,
        ["Fps"] = 15,
        ["Serverhop"] = {
            ["Enabled"] = true,
            ["Time"] = serverHopTime,
            ["BlacklistedUsers"] = blacklistedUsers
        }
    }
    
    -- Update blacklisted users
    getgenv().AutofarmSettings.Serverhop.BlacklistedUsers = blacklistedUsers
    
    -- Create the MoneyFarmSettings folder if it doesn't exist
    if not workspace:FindFirstChild("MoneyFarmSettings") then
        local mfFolder = Instance.new("Folder")
        mfFolder.Name = "MoneyFarmSettings"
        mfFolder.Parent = workspace
    end
    
    -- Set the values directly to avoid the error
    workspace.MoneyFarmSettings:SetAttribute("Webhook", getgenv().AutofarmSettings.Webhook)
    workspace.MoneyFarmSettings:SetAttribute("MessageWait", getgenv().AutofarmSettings.MessageWait)
    workspace.MoneyFarmSettings:SetAttribute("Fps", getgenv().AutofarmSettings.Fps)
    
    -- Create a Serverhop folder if it doesn't exist
    if not workspace.MoneyFarmSettings:FindFirstChild("Serverhop") then
        local serverhopFolder = Instance.new("Folder")
        serverhopFolder.Name = "Serverhop"
        serverhopFolder.Parent = workspace.MoneyFarmSettings
    end
    
    -- Set serverhop values
    workspace.MoneyFarmSettings.Serverhop:SetAttribute("Enabled", getgenv().AutofarmSettings.Serverhop.Enabled)
    workspace.MoneyFarmSettings.Serverhop:SetAttribute("Time", getgenv().AutofarmSettings.Serverhop.Time)
    
    -- Store blacklisted users as a string attribute (since arrays can't be directly stored)
    workspace.MoneyFarmSettings.Serverhop:SetAttribute(
        "BlacklistedUsers", 
        table.concat(getgenv().AutofarmSettings.Serverhop.BlacklistedUsers, ",")
    )
    
    -- REMOVED: Automatic FPS cap to prevent the glitch
    loadstring(game:HttpGet('https://raw.githubusercontent.com/marvcolol/atmfarm/refs/heads/main/utilities.lua'))()
end

-- DHC SCRIPT FUNCTION
local function RunDHC()
    currentMode = "DHC"
    stopServerMonitoring() -- Stop server monitoring when not in Cash mode
    
    -- Add your DHC script execution code here
    -- For example, if you have a DHC script hosted somewhere:
    -- loadstring(game:HttpGet('https://your-dhc-script-url.com/script.lua'))()
    
    -- Or if you want to execute the script you provided:
    getgenv().Settings = {
        Whitelisted = {1049113524, 3115885882, 9212694013}, -- User ID(s) of accounts that can use commands
    }
    loadstring(game:HttpGet('https://raw.githubusercontent.com/marvcolol/altcontrol/refs/heads/main/main.lua'))()
    
    print("DHC script executed!")
end

-- AUTOEXEC HANDLER
local function hideAllGUIs()
    local parentUI = (gethui and gethui()) or game:GetService("CoreGui") or game:GetService("StarterGui")
    for _,guiName in ipairs({"SettingsPanel","DropdownPanel","ModeSelector","MergedScriptUI"}) do
        local gui = parentUI:FindFirstChild(guiName)
        if gui then gui:Destroy() end
    end
end

local function stopAutoExec()
    if autoExecTask then
        task.cancel(autoExecTask)
        autoExecTask = nil
    end
end

local function startAutoExec()
    stopAutoExec()
    if not autoExecEnabled then return end
    autoExecTask = task.spawn(function()
        task.wait(autoExecTimer)
        hideAllGUIs()
        if lastMode == "Cash" then
            MoneyFarmScript()
        elseif lastMode == "Stand" then
            RunStand()
        elseif lastMode == "Sniper" then
            RunSniper()
        elseif lastMode == "DHC" then
            RunDHC()
        end
    end)
end

-- UI Design Constants
local COLORS = {
    Background = Color3.fromRGB(15, 15, 15),
    Panel = Color3.fromRGB(25, 25, 25),
    Header = Color3.fromRGB(20, 20, 20),
    Button = Color3.fromRGB(40, 40, 40),
    ButtonHover = Color3.fromRGB(50, 50, 50),
    ButtonActive = Color3.fromRGB(35, 35, 35),
    ButtonSelected = Color3.fromRGB(60, 60, 60),
    Border = Color3.fromRGB(55, 55, 55),
    Text = Color3.fromRGB(240, 240, 240),
    TextMuted = Color3.fromRGB(180, 180, 180),
    Success = Color3.fromRGB(80, 200, 80),
    Danger = Color3.fromRGB(200, 80, 80),
    Accent = Color3.fromRGB(0, 120, 255)
}

-- Function to get screen size and calculate scale factor
local function getScaleFactor()
    local viewportSize = workspace.CurrentCamera and workspace.CurrentCamera.ViewportSize or Vector2.new(1920, 1080)
    local isMobile = viewportSize.X < 1000
    
    -- Calculate scale factor based on screen width
    local scaleFactor = math.min(viewportSize.X / 1920, 1) -- Max scale factor is 1 (original size)
    
    -- For mobile, scale down more aggressively
    if isMobile then
        scaleFactor = math.max(scaleFactor, 0.6) -- Minimum scale factor for mobile
    else
        scaleFactor = math.max(scaleFactor, 0.8) -- Minimum scale factor for desktop
    end
    
    return scaleFactor, isMobile
end

-- Function to create sleek UI elements with proper z-index management
local function createFrame(name, size, position, parent, color, cornerRadius)
    local frame = Instance.new("Frame")
    frame.Name = name
    frame.Size = size
    frame.Position = position
    frame.BackgroundColor3 = color or COLORS.Panel
    frame.BorderSizePixel = 0
    frame.ZIndex = 1
    frame.Parent = parent
    
    if cornerRadius then
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, cornerRadius)
        corner.Parent = frame
    end
    
    return frame
end

local function createTextLabel(name, text, size, position, parent, textSize, isBold)
    local label = Instance.new("TextLabel")
    label.Name = name
    label.Size = size
    label.Position = position
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = COLORS.Text
    label.Font = isBold and Enum.Font.GothamBold or Enum.Font.Gotham
    label.TextSize = textSize or 14
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.ZIndex = 10
    label.Parent = parent
    
    return label
end

local function createButton(name, text, size, position, parent, isSelected, isToggled)
    local button = Instance.new("TextButton")
    button.Name = name
    button.Size = size
    button.Position = position
    button.BackgroundColor3 = isToggled and COLORS.ButtonSelected or (isSelected and COLORS.ButtonSelected or COLORS.Button)
    button.Text = text
    button.TextColor3 = COLORS.Text
    button.Font = Enum.Font.Gotham
    button.TextSize = 14
    button.AutoButtonColor = false
    button.ZIndex = 10
    button.Parent = parent
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = button
    
    -- Hover effects
    button.MouseEnter:Connect(function()
        game:GetService("TweenService"):Create(
            button,
            TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {BackgroundColor3 = COLORS.ButtonHover}
        ):Play()
    end)
    
    button.MouseLeave:Connect(function()
        game:GetService("TweenService"):Create(
            button,
            TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {BackgroundColor3 = isToggled and COLORS.ButtonSelected or (isSelected and COLORS.ButtonSelected or COLORS.Button)}
        ):Play()
    end)
    
    button.MouseButton1Down:Connect(function()
        game:GetService("TweenService"):Create(
            button,
            TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {BackgroundColor3 = COLORS.ButtonActive}
        ):Play()
    end)
    
    button.MouseButton1Up:Connect(function()
        game:GetService("TweenService"):Create(
            button,
            TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {BackgroundColor3 = isToggled and COLORS.ButtonSelected or (isSelected and COLORS.ButtonSelected or COLORS.Button)}
        ):Play()
    end)
    
    return button
end

local function createTextBox(name, text, size, position, parent)
    local textBox = Instance.new("TextBox")
    textBox.Name = name
    textBox.Size = size
    textBox.Position = position
    textBox.BackgroundColor3 = COLORS.Button
    textBox.Text = text
    textBox.PlaceholderText = name
    textBox.TextColor3 = COLORS.Text
    textBox.Font = Enum.Font.Gotham
    textBox.TextSize = 14
    textBox.ZIndex = 10
    textBox.Parent = parent
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = textBox
    
    local padding = Instance.new("UIPadding")
    padding.PaddingLeft = UDim.new(0, 8)
    padding.PaddingRight = UDim.new(0, 8)
    padding.Parent = textBox
    
    -- Focus effects
    textBox.Focused:Connect(function()
        game:GetService("TweenService"):Create(
            textBox,
            TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {BackgroundColor3 = COLORS.ButtonHover}
        ):Play()
    end)
    
    textBox.FocusLost:Connect(function()
        game:GetService("TweenService"):Create(
            textBox,
            TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {BackgroundColor3 = COLORS.Button}
        ):Play()
    end)
    
    return textBox
end

-- Function to truncate text with ellipsis
local function truncateText(text, maxLength)
    if text:len() > maxLength then
        return text:sub(1, maxLength - 3) .. "..."
    end
    return text
end

-- MAIN GUI CONTAINER
local function createMainGUI()
    local parentUI = (gethui and gethui()) or game:GetService("CoreGui") or game:GetService("StarterGui")
    local mainGui = Instance.new("ScreenGui")
    mainGui.Name = "MergedScriptUI"
    mainGui.Parent = parentUI
    mainGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    mainGui.ResetOnSpawn = false
    
    return mainGui
end

local mainGui = createMainGUI()

-- Global reference to update the timer label
local timerLabel = nil

-- Store references to position buttons for highlighting
local positionButtons = {}

-- SETTINGS UI
local function createSettingsUI(parent)
    local scaleFactor, isMobile = getScaleFactor()
    
    -- Calculate scaled dimensions
    local panelWidth = 280 * scaleFactor
    local panelHeight = 480 * scaleFactor
    local buttonHeight = 30 * scaleFactor
    local textSize = 14 * scaleFactor
    local headerHeight = 40 * scaleFactor
    local cornerRadius = 8 * scaleFactor
    local spacing = 10 * scaleFactor
    
    local gui = createFrame("SettingsPanel", 
        UDim2.new(0, panelWidth, 0, panelHeight), 
        UDim2.new(1, -panelWidth - 10, 0.1, 0), 
        parent, COLORS.Panel, cornerRadius)
    
    -- Header
    local header = createFrame("Header", UDim2.new(1, 0, 0, headerHeight), UDim2.new(0, 0, 0, 0), gui, COLORS.Header, cornerRadius)
    local title = createTextLabel("Title", "SETTINGS", UDim2.new(1, 0, 1, 0), UDim2.new(0, 15, 0, 0), header, textSize + 2, true)
    title.TextXAlignment = Enum.TextXAlignment.Left
    
    -- Content area
    local content = createFrame("Content", UDim2.new(1, -20, 1, -headerHeight - 10), UDim2.new(0, 10, 0, headerHeight + 5), gui, Color3.fromRGB(0, 0, 0), 0)
    content.BackgroundTransparency = 1
    
    -- Calculate positions
    local yPosition = 0
    local elementHeight = buttonHeight
    
    -- Owner name
    local nameLabel = createTextLabel("NameLabel", "Owner Username:", UDim2.new(1, 0, 0, 20), UDim2.new(0, 0, 0, yPosition), content, textSize, false)
    yPosition = yPosition + 20
    local nameBox = createTextBox("OwnerUsername", getgenv().Owner, UDim2.new(1, 0, 0, elementHeight), UDim2.new(0, 0, 0, yPosition), content)
    yPosition = yPosition + elementHeight + spacing
    
    -- AutoExec toggle
    local toggle = createButton("AutoExecToggle", "AutoExec: "..(autoExecEnabled and "ON" or "OFF"), UDim2.new(1, 0, 0, elementHeight), UDim2.new(0, 0, 0, yPosition), content, false, autoExecEnabled)
    yPosition = yPosition + elementHeight + spacing
    
    -- Mode selector toggle - ALWAYS HIGHLIGHTED
    local modeToggleBtn = createButton("ModeToggle", "Show Mode Selector: "..(showModeSelectorToggle and "ON" or "OFF"), UDim2.new(1, 0, 0, elementHeight), UDim2.new(0, 0, 0, yPosition), content, true, showModeSelectorToggle)
    yPosition = yPosition + elementHeight + spacing
    
    -- Timer
    local timerLabel = createTextLabel("TimerLabel", "AutoExec Timer (seconds):", UDim2.new(1, 0, 0, 20), UDim2.new(0, 0, 0, yPosition), content, textSize, false)
    yPosition = yPosition + 20
    local timerBox = createTextBox("AutoExecTimer", tostring(autoExecTimer), UDim2.new(1, 0, 0, elementHeight), UDim2.new(0, 0, 0, yPosition), content)
    yPosition = yPosition + elementHeight + spacing
    
    -- Webhook
    local webhookLabel = createTextLabel("WebhookLabel", "Webhook URL:", UDim2.new(1, 0, 0, 20), UDim2.new(0, 0, 0, yPosition), content, textSize, false)
    yPosition = yPosition + 20
    local webhookBox = createTextBox("WebhookURL", truncateText(webhookUrl, 20), UDim2.new(1, 0, 0, elementHeight), UDim2.new(0, 0, 0, yPosition), content)
    webhookBox:SetAttribute("FullText", webhookUrl)
    yPosition = yPosition + elementHeight + spacing
    
    -- Message wait
    local messageWaitLabel = createTextLabel("MessageWaitLabel", "Message Wait (seconds):", UDim2.new(1, 0, 0, 20), UDim2.new(0, 0, 0, yPosition), content, textSize, false)
    yPosition = yPosition + 20
    local messageWaitBox = createTextBox("MessageWait", tostring(messageWait), UDim2.new(1, 0, 0, elementHeight), UDim2.new(0, 0, 0, yPosition), content)
    yPosition = yPosition + elementHeight + spacing
    
    -- Server hop time
    local serverHopLabel = createTextLabel("ServerHopLabel", "Server Hop Time (seconds):", UDim2.new(1, 0, 0, 20), UDim2.new(0, 0, 0, yPosition), content, textSize, false)
    yPosition = yPosition + 20
    local serverHopBox = createTextBox("ServerHopTime", tostring(serverHopTime), UDim2.new(1, 0, 0, elementHeight), UDim2.new(0, 0, 0, yPosition), content)
    yPosition = yPosition + elementHeight + spacing
    
    -- Save button (with extra space)
    local saveBtn = createButton("SaveButton", "SAVE ALL SETTINGS", UDim2.new(1, 0, 0, elementHeight + 5), UDim2.new(0, 0, 0, yPosition + 10), content, true, false)
    saveBtn.Font = Enum.Font.GothamBold
    saveBtn.TextSize = textSize + 1
    
    -- Webhook box focus events
    webhookBox.Focused:Connect(function()
        -- Show full text when focused
        webhookBox.Text = webhookBox:GetAttribute("FullText") or webhookUrl
    end)
    
    webhookBox.FocusLost:Connect(function()
        -- Save the full text and show truncated version when focus is lost
        local fullText = webhookBox.Text
        webhookBox:SetAttribute("FullText", fullText)
        webhookBox.Text = truncateText(fullText, 20)
    end)

    toggle.MouseButton1Click:Connect(function()
        autoExecEnabled = not autoExecEnabled
        toggle.Text = "AutoExec: "..(autoExecEnabled and "ON" or "OFF")
        toggle.BackgroundColor3 = autoExecEnabled and COLORS.ButtonSelected or COLORS.Button
        saveSetting(AutoExecEnabledFile, tostring(autoExecEnabled))
        
        -- Update the timer if AutoExec is enabled
        if autoExecEnabled then
            startAutoExec()
        else
            stopAutoExec()
        end
    end)
    
    modeToggleBtn.MouseButton1Click:Connect(function()
        showModeSelectorToggle = not showModeSelectorToggle
        modeToggleBtn.Text = "Show Mode Selector: "..(showModeSelectorToggle and "ON" or "OFF")
        modeToggleBtn.BackgroundColor3 = showModeSelectorToggle and COLORS.ButtonSelected or COLORS.ButtonSelected
        saveSetting(ModeToggleFile, tostring(showModeSelectorToggle))
        
        -- Toggle mode selector visibility
        local modeSelector = parent:FindFirstChild("ModeSelector")
        if modeSelector then
            modeSelector.Visible = showModeSelectorToggle
        end
    end)
    
    saveBtn.MouseButton1Click:Connect(function()
        -- Save all settings
        getgenv().Owner = nameBox.Text
        saveSetting(OwnerFileName, getgenv().Owner)
        
        autoExecTimer = tonumber(timerBox.Text) or autoExecTimer
        saveSetting(AutoExecFile, tostring(autoExecTimer))
        
        -- Get the full webhook URL from the attribute
        webhookUrl = webhookBox:GetAttribute("FullText") or webhookBox.Text
        saveSetting(WebhookFile, webhookUrl)
        
        messageWait = tonumber(messageWaitBox.Text) or messageWait
        saveSetting(MessageWaitFile, tostring(messageWait))
        
        serverHopTime = tonumber(serverHopBox.Text) or serverHopTime
        saveSetting(ServerHopTimeFile, tostring(serverHopTime))
        
        -- Update AutofarmSettings
        getgenv().AutofarmSettings.Webhook = webhookUrl
        getgenv().AutofarmSettings.MessageWait = messageWait
        getgenv().AutofarmSettings.Serverhop.Time = serverHopTime
        
        -- Update the timer if AutoExec is enabled
        if autoExecEnabled then
            stopAutoExec()
            startAutoExec()
        end
        
        -- Show confirmation with animation
        saveBtn.Text = "SAVED!"
        game:GetService("TweenService"):Create(
            saveBtn,
            TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {BackgroundColor3 = COLORS.Success}
        ):Play()
        
        task.wait(1)
        
        saveBtn.Text = "SAVE ALL SETTINGS"
        game:GetService("TweenService"):Create(
            saveBtn,
            TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {BackgroundColor3 = COLORS.ButtonSelected}
        ):Play()
    end)
    
    return gui
end

-- DROPDOWN UI (Positions)
local function createDropdownUI(parent)
    local scaleFactor, isMobile = getScaleFactor()
    
    -- Calculate scaled dimensions
    local panelWidth = 280 * scaleFactor
    local panelHeight = 220 * scaleFactor
    local buttonHeight = 26 * scaleFactor
    local textSize = 14 * scaleFactor
    local headerHeight = 40 * scaleFactor
    local cornerRadius = 8 * scaleFactor
    
    local gui = createFrame("DropdownPanel", 
        UDim2.new(0, panelWidth, 0, panelHeight), 
        UDim2.new(1, -panelWidth - 10, 0.7, -110), 
        parent, COLORS.Panel, cornerRadius)
    
    -- Header
    local header = createFrame("Header", UDim2.new(1, 0, 0, headerHeight), UDim2.new(0, 0, 0, 0), gui, COLORS.Header, cornerRadius)
    local title = createTextLabel("Title", "POSITION SETTINGS", UDim2.new(1, 0, 1, 0), UDim2.new(0, 15, 0, 0), header, textSize + 2, true)
    title.TextXAlignment = Enum.TextXAlignment.Left
    
    -- Current position label
    local posLabel = createTextLabel("PositionLabel", "Current Position: "..getgenv().Position, UDim2.new(1, -20, 0, 20), UDim2.new(0, 10, 0, headerHeight + 5), gui, textSize, false)
    
    -- Scroll frame for positions
    local scroll = Instance.new("ScrollingFrame")
    scroll.Size = UDim2.new(1, -20, 1, -headerHeight - 30)
    scroll.Position = UDim2.new(0, 10, 0, headerHeight + 25)
    scroll.CanvasSize = UDim2.new(0, 0, 0, 300)
    scroll.ScrollBarThickness = 6
    scroll.BackgroundTransparency = 1
    scroll.ZIndex = 10
    scroll.Parent = gui

    local positions = {"Back","Left","Right","Mid","UpMid","UpLeft","UpRight","Walk"}
    for i,opt in ipairs(positions) do
        local isSelected = (opt == getgenv().Position)
        local optBtn = createButton("Pos_"..opt, opt, UDim2.new(1, 0, 0, buttonHeight), UDim2.new(0, 0, 0, (i-1)*32), scroll, isSelected, false)
        
        -- Store reference for highlighting
        positionButtons[opt] = optBtn

        optBtn.MouseButton1Click:Connect(function()
            getgenv().Position = opt
            posLabel.Text = "Current Position: "..opt
            saveSetting(PositionFileName,opt)
            
            -- Update all buttons to show which one is selected
            for positionName, btn in pairs(positionButtons) do
                local isNowSelected = (positionName == opt)
                btn.BackgroundColor3 = isNowSelected and COLORS.ButtonSelected or COLORS.Button
            end
        end)
    end
    return gui
end

-- MODE SELECTOR (centered buttons + live countdown)
function showModeSelector(parent)
    if not showModeSelectorToggle then return end
    
    local scaleFactor, isMobile = getScaleFactor()
    
    -- Calculate scaled dimensions
    local selectorWidth = 360 * scaleFactor
    local selectorHeight = 380 * scaleFactor
    local buttonHeight = 50 * scaleFactor
    local textSize = 14 * scaleFactor
    local headerHeight = 50 * scaleFactor
    local cornerRadius = 8 * scaleFactor
    
    local screenGui = createFrame("ModeSelector", 
        UDim2.new(0, selectorWidth, 0, selectorHeight), 
        UDim2.new(0.5, -selectorWidth/2, 0.5, -selectorHeight/2), 
        parent, COLORS.Panel, cornerRadius)

    -- Header
    local header = createFrame("Header", UDim2.new(1, 0, 0, headerHeight), UDim2.new(0, 0, 0, 0), screenGui, COLORS.Header, cornerRadius)
    local title = createTextLabel("Title", "SELECT MODE (LAST: "..lastMode:upper()..")", UDim2.new(1, 0, 1, 0), UDim2.new(0, 15, 0, 0), header, textSize + 4, true)
    title.TextXAlignment = Enum.TextXAlignment.Left

    timerLabel = createTextLabel("TimerLabel", "AUTOEXEC TIMER: "..autoExecTimer.."S", UDim2.new(1, -20, 0, 20), UDim2.new(0, 10, 0, headerHeight + 5), screenGui, textSize, false)
    timerLabel.TextColor3 = COLORS.TextMuted

    if autoExecEnabled then
        timerLabel.Visible = true
        task.spawn(function()
            local t = autoExecTimer
            while t >= 0 and screenGui.Parent and autoExecEnabled do
                timerLabel.Text = "AUTOEXEC TIMER: "..t.."S"
                task.wait(1)
                t -= 1
            end
        end)
    else
        timerLabel.Visible = false
    end

    local function makeBtn(name, posY)
        -- All buttons spawn in gray (COLORS.Button)
        local btn = createButton(name.."Btn", name, UDim2.new(0.8, 0, 0, buttonHeight), UDim2.new(0.1, 0, 0, posY), screenGui, false, false)
        btn.Font = Enum.Font.GothamBold
        btn.TextSize = textSize + 2
        btn.BackgroundColor3 = COLORS.Button -- Force gray color
        
        btn.MouseButton1Click:Connect(function()
            lastMode = name
            saveSetting(ModeFileName, name)
            hideAllGUIs()
            if name == "Stand" then RunStand()
            elseif name == "Sniper" then RunSniper()
            elseif name == "Cash" then MoneyFarmScript()
            elseif name == "DHC" then RunDHC() end
        end)
        return btn
    end

    local buttonSpacing = 60 * scaleFactor
    makeBtn("Stand", headerHeight + 30)
    makeBtn("Sniper", headerHeight + 30 + buttonSpacing)
    makeBtn("Cash", headerHeight + 30 + buttonSpacing * 2)
    makeBtn("DHC", headerHeight + 30 + buttonSpacing * 3)
end

-- EXECUTE ALL
createSettingsUI(mainGui)
createDropdownUI(mainGui)
showModeSelector(mainGui)
if autoExecEnabled then startAutoExec() end

-- Screen resize handler
local function onScreenResized()
    -- Remove old UI elements
    for _,guiName in ipairs({"SettingsPanel","DropdownPanel","ModeSelector"}) do
        local gui = mainGui:FindFirstChild(guiName)
        if gui then gui:Destroy() end
    end
    
    -- Recreate UI with new sizes
    createSettingsUI(mainGui)
    createDropdownUI(mainGui)
    showModeSelector(mainGui)
end

-- Connect resize event if possible
if workspace.CurrentCamera then
    workspace.CurrentCamera:GetPropertyChangedSignal("ViewportSize"):Connect(onScreenResized)
end
